package proyecto1;

import java.awt.Color;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.*;
import java.awt.*;
import static java.lang.Thread.sleep;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Javier E. Tello <devjtello@gmail.com>
 */
public class frmTablero extends javax.swing.JFrame {

    //Variables globales del formulario
    int DimensionX = 0;
    int DimensionY = 0;
    int TamX = 0;
    int TamY = 0;
    boolean cambio=true;
    int cantVidas;
    int cantBombas;
    int [] personajesX=new int[6];
    int [] personajesY=new int[6];
    int [] vidasX;
    int [] vidasY;
    int [] BombasX;
    int [] BombasY;
    int [] VidasG;
    String nombre[]=new String[20];
    String orden1=new String();
    String orden2=new String();
    String[] oden1;
    String[] oden2;
    String Pju1;
    String Pju2;
    String Sju1;
    String Sju2;
    String Tju1;
    String Tju2;
    
    static int njugador = 0;
    static int gvidas = 0;
    int dado=0;
    boolean aVida=true;
    boolean bVida=true;
    int Xv=0;
    int Yv=0;
    int Yv1=0;
    int P1X = 0;
    int P1Y = 0;
    int P2X = 0;
    int P2Y = 0;
    int M1X = 0;
    int M1Y = 0;
    int M2X = 0;
    int M2Y = 0;
    int G1X = 0;
    int G1Y = 0;
    int G2X = 0;
    int G2Y = 0;
    int turno=0;
    String Turno="";
    int minutos=1;
    int segundos=59;
    int vidas1=5;
    int vidas2=5;
    
    static final int TableroX = 500;
    static final int TableroY = 500;
    //Matriz de botones
    JButton[][] MatrizBotones;
    JLabel[][] MatrizLabels;
    private Image fondo;
    
    
    /**
     * Creates new form frmTablero
     */
    public frmTablero() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlMenu = new javax.swing.JPanel();
        lblDimX = new javax.swing.JLabel();
        tbxDimX = new javax.swing.JTextField();
        btnDestruir = new javax.swing.JButton();
        btnCrear = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        pnlTablero = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        NombreJ1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        Vidas1 = new javax.swing.JLabel();
        P1 = new javax.swing.JLabel();
        p3 = new javax.swing.JLabel();
        p2 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        NombreJ2 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        Vidas2 = new javax.swing.JLabel();
        S1 = new javax.swing.JLabel();
        S3 = new javax.swing.JLabel();
        S2 = new javax.swing.JLabel();
        Tirar = new javax.swing.JButton();
        Numero = new javax.swing.JLabel();
        Arriba = new javax.swing.JButton();
        Izquierda = new javax.swing.JButton();
        Derecha = new javax.swing.JButton();
        Abajo = new javax.swing.JButton();
        jLabel22 = new javax.swing.JLabel();
        Minutos = new javax.swing.JLabel();
        se = new javax.swing.JLabel();
        AtAbajo = new javax.swing.JButton();
        AtArriba = new javax.swing.JButton();
        AtDerecha = new javax.swing.JButton();
        AtIzquierda = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Matríz Dinamica");
        setName("frmTablero"); // NOI18N
        setResizable(false);
        setSize(new java.awt.Dimension(500, 500));

        lblDimX.setText("Tamaño");

        tbxDimX.setPreferredSize(new java.awt.Dimension(50, 24));

        btnDestruir.setText("Destruir");
        btnDestruir.setToolTipText("");
        btnDestruir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDestruirActionPerformed(evt);
            }
        });

        btnCrear.setText("Crear");
        btnCrear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCrearActionPerformed(evt);
            }
        });

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        javax.swing.GroupLayout pnlMenuLayout = new javax.swing.GroupLayout(pnlMenu);
        pnlMenu.setLayout(pnlMenuLayout);
        pnlMenuLayout.setHorizontalGroup(
            pnlMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMenuLayout.createSequentialGroup()
                .addComponent(lblDimX)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tbxDimX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnCrear)
                .addGap(18, 18, 18)
                .addComponent(btnDestruir)
                .addGap(3, 3, 3)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        pnlMenuLayout.setVerticalGroup(
            pnlMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMenuLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblDimX)
                        .addComponent(tbxDimX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnCrear)
                        .addComponent(btnDestruir))))
        );

        pnlTablero.setBackground(new java.awt.Color(204, 204, 204));
        pnlTablero.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pnlTablero.setToolTipText("");
        pnlTablero.setOpaque(false);

        javax.swing.GroupLayout pnlTableroLayout = new javax.swing.GroupLayout(pnlTablero);
        pnlTablero.setLayout(pnlTableroLayout);
        pnlTableroLayout.setHorizontalGroup(
            pnlTableroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
        );
        pnlTableroLayout.setVerticalGroup(
            pnlTableroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
        );

        jPanel2.setBackground(new java.awt.Color(153, 153, 153));

        jLabel1.setBackground(new java.awt.Color(0, 255, 51));
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Tiempo");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Jugador 1");
        jLabel2.setMaximumSize(new java.awt.Dimension(51, 17));
        jLabel2.setMinimumSize(new java.awt.Dimension(51, 17));

        NombreJ1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        NombreJ1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jLabel5.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N
        jLabel5.setText("Personajes");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setText("Vidas");

        Vidas1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        P1.setText(".");

        p3.setText(".");

        p2.setText(".");

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Jugador 2");

        NombreJ2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        NombreJ2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jLabel13.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N
        jLabel13.setText("Personajes");

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel14.setText("Vidas");

        Vidas2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        S1.setText(".");

        S2.setText(".");

        Tirar.setText("Tirar");
        Tirar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TirarActionPerformed(evt);
            }
        });

        Numero.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        Arriba.setText("Arriba");
        Arriba.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ArribaActionPerformed(evt);
            }
        });

        Izquierda.setText("Izquierda");
        Izquierda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IzquierdaActionPerformed(evt);
            }
        });

        Derecha.setText("Derecha");
        Derecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DerechaActionPerformed(evt);
            }
        });

        Abajo.setText("Abajo");
        Abajo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AbajoActionPerformed(evt);
            }
        });

        jLabel22.setText(":");

        Minutos.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        Minutos.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        AtAbajo.setText("Atacar Abajo");
        AtAbajo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AtAbajoActionPerformed(evt);
            }
        });

        AtArriba.setText("Atacar Arriba");
        AtArriba.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AtArribaActionPerformed(evt);
            }
        });

        AtDerecha.setText("Atacar Derecha");
        AtDerecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AtDerechaActionPerformed(evt);
            }
        });

        AtIzquierda.setText("Atacar Izquierda");
        AtIzquierda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AtIzquierdaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel14)
                                .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel6))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(Minutos, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(8, 8, 8)
                                .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(29, 29, 29)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(se, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(NombreJ1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(NombreJ2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(Vidas2, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                                        .addComponent(Vidas1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGap(0, 0, Short.MAX_VALUE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(P1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(p3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(p2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(S1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(S2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(S3, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap(71, Short.MAX_VALUE)
                                .addComponent(Izquierda)
                                .addGap(32, 32, 32)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Abajo)
                                    .addComponent(Arriba))
                                .addGap(30, 30, 30))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(96, 96, 96)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(Tirar)
                                    .addComponent(Numero, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(AtAbajo)
                            .addComponent(Derecha)
                            .addComponent(AtArriba)
                            .addComponent(AtDerecha)
                            .addComponent(AtIzquierda))
                        .addGap(38, 38, 38)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(se, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel22))
                        .addComponent(Minutos, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(14, 14, 14)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(NombreJ1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Vidas1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addComponent(p2)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(P1)
                        .addGap(45, 45, 45)
                        .addComponent(p3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel11)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(NombreJ2, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Vidas2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(S2)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(57, 57, 57)
                                .addComponent(jLabel14))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(S1)))
                        .addGap(7, 7, 7)
                        .addComponent(S3, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addComponent(AtArriba)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Tirar)
                            .addComponent(AtAbajo))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Numero, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(AtDerecha, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Arriba)
                    .addComponent(AtIzquierda))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Izquierda)
                    .addComponent(Derecha)
                    .addComponent(Abajo))
                .addContainerGap(44, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pnlTablero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(pnlMenu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pnlTablero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCrearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCrearActionPerformed
        //Se verifica que las entradas sean validas
        if(ValidarDimensiones())
        {   
            Minutos.setText("1");
            se.setText("59");
            Thread cronometro=new Thread(){
                public void run()  {
                    try {
                        minutos=1;
                        segundos=59;
                        while(minutos>=0){
                            segundos--;
                        if (segundos==0) {
                            segundos=59;
                            minutos--;
                        }
                        String tiempoS="";
                        tiempoS=String.valueOf(segundos);
                        String tiempoM="";
                        tiempoM=String.valueOf(minutos);
                        se.setText(tiempoS);
                        Minutos.setText(tiempoM);
                        sleep(1000);
                        }
                    } catch (InterruptedException ex) {
                        Logger.getLogger(frmTablero.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            };
            Thread fin=new Thread(){
                public void run()  {
                    try {
                        boolean tiempo=true;
                        while(tiempo){
                            
                        if (minutos<0) {
                            Arriba.setEnabled(false);
                            Abajo.setEnabled(false);
                            Tirar.setEnabled(false);
                            Derecha.setEnabled(false);
                            Izquierda.setEnabled(false);
                            System.out.println("finish");
                            tiempo=false;
                            if (vidas1>vidas2) {
                                JOptionPane.showMessageDialog(null, "Jugador 1 Gana.");
                            }
                            if (vidas2>vidas1) {
                                JOptionPane.showMessageDialog(null, "Jugador 2 Gana.");
                            }
                            if (vidas1==vidas2) {
                                JOptionPane.showMessageDialog(null, "Empate.");
                            }
                            VidasG[gvidas]=vidas1;
                            gvidas++;
                            VidasG[gvidas]=vidas2;
                        }
                        
                        sleep(100);
                        }
                    } catch (InterruptedException ex) {
                        Logger.getLogger(frmTablero.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            };
            Thread vida1=new Thread(){
                public void run()  {
                    try {
                        boolean cavida1=true;
                        while(cavida1){
                            if (vidas1==4) {
                                ImageIcon vidass1=new ImageIcon(getClass().getResource("/imagenes/1cor4.png"));
                                ImageIcon v1=new ImageIcon(vidass1.getImage());
                                Vidas1.setIcon(v1);  
                            }
                            if (vidas1==3) {
                                ImageIcon vidass1=new ImageIcon(getClass().getResource("/imagenes/1cor3.png"));
                                ImageIcon v1=new ImageIcon(vidass1.getImage());
                                Vidas1.setIcon(v1); 
                            }
                            if (vidas1==2) {
                                 ImageIcon vidass1=new ImageIcon(getClass().getResource("/imagenes/1cor2.png"));
                                ImageIcon v1=new ImageIcon(vidass1.getImage());
                                Vidas1.setIcon(v1);
                            }
                            if (vidas1==1) {
                                 ImageIcon vidass1=new ImageIcon(getClass().getResource("/imagenes/1cor1.png"));
                                ImageIcon v1=new ImageIcon(vidass1.getImage());
                                Vidas1.setIcon(v1);
                            }
                            if (vidas1<=0) {
                                ImageIcon vidass1=new ImageIcon(getClass().getResource("/imagenes/1cor0.png"));
                                ImageIcon v1=new ImageIcon(vidass1.getImage());
                                Vidas1.setIcon(v1);
                                Arriba.setEnabled(false);
                                Abajo.setEnabled(false);
                                Tirar.setEnabled(false);
                                Derecha.setEnabled(false);
                                Izquierda.setEnabled(false);
                                System.out.println("finish");
                                cavida1=false;
                                JOptionPane.showMessageDialog(null, "Jugador 2 Gana.");
                                VidasG[gvidas]=vidas1;
                                gvidas++;
                                VidasG[gvidas]=vidas2;
                            }
                        
                        sleep(100);
                        }
                    } catch (InterruptedException ex) {
                        Logger.getLogger(frmTablero.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            };
            Thread vida2=new Thread(){
                public void run()  {
                    try {
                        boolean cavida2=true;
                        while(cavida2){
                            if (vidas2==4) {
                                ImageIcon vidass1=new ImageIcon(getClass().getResource("/imagenes/2cor4.png"));
                                ImageIcon v1=new ImageIcon(vidass1.getImage());
                                Vidas2.setIcon(v1);  
                            }
                            if (vidas2==3) {
                                ImageIcon vidass1=new ImageIcon(getClass().getResource("/imagenes/2cor3.png"));
                                ImageIcon v1=new ImageIcon(vidass1.getImage());
                                Vidas2.setIcon(v1); 
                            }
                            if (vidas2==2) {
                                 ImageIcon vidass1=new ImageIcon(getClass().getResource("/imagenes/2cor2.png"));
                                ImageIcon v1=new ImageIcon(vidass1.getImage());
                                Vidas2.setIcon(v1);
                            }
                            if (vidas2==1) {
                                 ImageIcon vidass1=new ImageIcon(getClass().getResource("/imagenes/2cor1.png"));
                                ImageIcon v1=new ImageIcon(vidass1.getImage());
                                Vidas2.setIcon(v1);
                            }
                            if (vidas2<=0) {
                                ImageIcon vidass1=new ImageIcon(getClass().getResource("/imagenes/2cor0.png"));
                                ImageIcon v1=new ImageIcon(vidass1.getImage());
                                Vidas2.setIcon(v1);
                                Arriba.setEnabled(false);
                                Abajo.setEnabled(false);
                                Tirar.setEnabled(false);
                                Derecha.setEnabled(false);
                                Izquierda.setEnabled(false);
                                System.out.println("finish");
                                cavida2=false;
                                JOptionPane.showMessageDialog(null, "Jugador 1 Gana.");
                                VidasG[gvidas]=vidas1;
                                gvidas++;
                                VidasG[gvidas]=vidas2;
                            }
                        
                        sleep(100);
                        }
                    } catch (InterruptedException ex) {
                        Logger.getLogger(frmTablero.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            };
            btnCrear.setEnabled(false);
            Arriba.setEnabled(true);
            Abajo.setEnabled(true);
            Tirar.setEnabled(true);
            Derecha.setEnabled(true);
            Izquierda.setEnabled(true);
            ImageIcon vidass1=new ImageIcon(getClass().getResource("/imagenes/1cor5.png"));
            ImageIcon v1=new ImageIcon(vidass1.getImage());
            Vidas1.setIcon(v1);
            ImageIcon vidass2=new ImageIcon(getClass().getResource("/imagenes/2cor5.png"));
            ImageIcon v2=new ImageIcon(vidass2.getImage());
            Vidas2.setIcon(v2);
            cambio=true;
            turno=0;
            vidas1=5;
            vidas2=5;
             do{
                    nombre[njugador]= JOptionPane.showInputDialog("Jugador 1(azul)");
                        if ((nombre[njugador]==null)||nombre[njugador].equals("")) {
                            JOptionPane.showMessageDialog(null, "No hay ningun nombre escrito.");
                        }
                    }while((nombre[njugador]==null)||nombre[njugador].equals(""));
             do{
                    orden1= JOptionPane.showInputDialog("Escriba el orden sus personajes(separados por comas)");
                        if ((orden1==null)||orden1.equals("")) {
                            JOptionPane.showMessageDialog(null, "No hay ningun orden escrito.");
                        }
                    }while((orden1==null)||orden1.equals(""));
             NombreJ1.setText(nombre[njugador]);
             njugador++;
             oden1=orden1.split(",");
             P1.setText(oden1[0]);
             p2.setText(oden1[1]);
             p3.setText(oden1[2]);
             
             
             do{
                    nombre[njugador]= JOptionPane.showInputDialog("Jugador 2(verde)");
                        if ((nombre[njugador]==null)||nombre[njugador].equals("")) {
                            JOptionPane.showMessageDialog(null, "No hay ningun nombre escrito.");
                        }
                    }while((nombre[njugador]==null)||nombre[njugador].equals(""));
             do{
                    orden2= JOptionPane.showInputDialog("Escriba el orden sus personajes(separados por comas)");
                        if ((orden2==null)||orden2.equals("")) {
                            JOptionPane.showMessageDialog(null, "No hay ningun orden escrito.");
                        }
                    }while((orden2==null)||orden2.equals(""));
            NombreJ2.setText(nombre[njugador]);
            njugador++;
            oden2=orden2.split(",");
            S1.setText(oden2[0]);
            S2.setText(oden2[1]);
            S3.setText(oden2[2]);
            cronometro.start();
            fin.start();
            vida1.start();
            vida2.start();
            //Se settea el tamaño de la matriz de botones
            MatrizLabels = new JLabel[DimensionX][DimensionY];
            //Se settea el tamaño de gridLayout de nuestro panel del tablero
            pnlTablero.setLayout(new GridLayout(DimensionX,DimensionY));
            //Se obtiene el tamaño de los botones acorde a su cantidad
            ObtenerTamanioObjetos(DimensionX,DimensionY);
            for(int i = 0; i <personajesX.length; i++){
                personajesX[i]=generaNumAleatorio(0,DimensionX-1);
                System.out.println(personajesX[i]);
            }
            
            for (int i = 0; i <personajesY.length; i++) {
                if (i==0) {
                    personajesY[i]=generaNumAleatorio(0,DimensionY-1);
                    System.out.print(personajesY[i]);
                }
                if (i==1) {
                   do{
                       
                   personajesY[i]=generaNumAleatorio(0,DimensionY-1); 
                   }while(personajesY[i]==personajesY[i-1]);
                   System.out.print(personajesY[i]);
                    
                }
                if (i==2) {
                   do{
                       
                   personajesY[i]=generaNumAleatorio(0,DimensionY-1); 
                   }while(personajesY[i]==personajesY[i-1] || personajesY[i]==personajesY[i-2]);
                   System.out.print(personajesY[i]);
                    
                }
                if (i==3) {
                   do{
                       
                   personajesY[i]=generaNumAleatorio(0,DimensionY-1); 
                   }while(personajesY[i]==personajesY[i-1] || personajesY[i]==personajesY[i-2] || personajesY[i]==personajesY[i-3]);
                   System.out.print(personajesY[i]);
                    
                }
                if (i==4) {
                   do{
                       
                   personajesY[i]=generaNumAleatorio(0,DimensionY-1); 
                   }while(personajesY[i]==personajesY[i-1] || personajesY[i]==personajesY[i-2] || personajesY[i]==personajesY[i-3] || personajesY[i]==personajesY[i-4]);
                   System.out.print(personajesY[i]);
                    
                }
                if (i==5) {
                   do{
                       
                   personajesY[i]=generaNumAleatorio(0,DimensionY-1); 
                   }while(personajesY[i]==personajesY[i-1] || personajesY[i]==personajesY[i-2] || personajesY[i]==personajesY[i-3] || personajesY[i]==personajesY[i-4] || personajesY[i]==personajesY[i-5]);
                   System.out.print(personajesY[i]);
                    
                }
            }
            cantVidas=(int)(DimensionX*DimensionX*0.05);
            cantBombas=(int)(DimensionX*DimensionX*0.1);
            vidasY=new int[cantVidas];
            vidasX=new int[cantVidas];
            BombasY=new int[cantBombas];
            BombasX=new int[cantBombas];
            System.out.println("vida"+cantVidas);
            for (int i = 0; i<vidasX.length; i++) {
                aVida=true;bVida=true;
                while(aVida){
                    bVida=true;aVida=true;
                    vidasX[i]=generaNumAleatorio(0,DimensionY-1);
                    while(aVida){
                        for (int j = 0; j < vidasX.length; j++) {
                            if (vidasX[i]== vidasX[j]) {
                                Xv++;
                            }
                        }
                        aVida=false;
                    }
                }
                System.out.println(Xv+"a"+vidasX[i]);
            }
            for (int i = 0; i<vidasY.length; i++) {
                aVida=true;bVida=true;
                while(aVida){
                    aVida=true;
                    vidasY[i]=generaNumAleatorio(0,DimensionY-1);
                        for (int j = 0; j < i; j++) {
                            if (vidasY[i]== vidasY[j]) { 
                                Yv++;
                            }
                        }
                        if (Yv==0) {
                            aVida=false;
                        }
                        if (Yv>0) {
                            Yv=0;
                            System.out.println("crecio");
                        }
                        for (int j = 0; j < personajesY.length; j++) {
                            if (vidasY[i]==personajesY[j] && vidasX[i]==personajesX[j]) {
                                aVida=true;
                                System.out.println("fallo");
                            }
                        }
                }
                System.out.println(Yv+"b"+vidasY[i]);
            }
            for (int i = 0; i<BombasX.length; i++) {
                aVida=true;bVida=true;
                while(aVida){
                    bVida=true;aVida=true;
                    BombasX[i]=generaNumAleatorio(0,DimensionY-1);
                    while(aVida){
                        for (int j = 0; j < BombasX.length; j++) {
                            if ( BombasX[i]== BombasX[j]) {
                                Xv++;
                            }
                        }
                        aVida=false;
                    }
                }
                System.out.println(Xv+"c"+BombasX[i]);
            }
            for (int i = 0; i<BombasY.length; i++) {
                aVida=true;bVida=true;
                while(aVida){
                    aVida=false;bVida=false;
                    BombasY[i]=generaNumAleatorio(0,DimensionY-1);
//                        for (int j = 0; j < i; j++) {
//                            if (BombasY[i]== BombasY[j]) { 
//                                Yv++;
//                            }
//                        }
//                        if (Yv==0) {
//                            aVida=false;
//                        }
//                        if (Yv>0) {
//                            Yv=0;
//                            System.out.println("crecio");
//                        }
                        for (int j = 0; j < personajesY.length; j++) {
                            if (BombasY[i]==personajesY[j] && BombasX[i]==personajesX[j]) {
                                aVida=true;
                                System.out.println("fallo");
                            }
                        }
                        for (int j = 0; j < vidasX.length; j++) {
                            if (BombasY[i]==vidasY[j] && BombasX[i]==vidasX[j]) {
                                aVida=true;
                                System.out.println("fallos");
                            }
                        }
                }
                System.out.println(Yv+"d"+BombasY[i]);
            }
            //Se declaran los contadores a utilizar
            int contadorX, contadorY;
            //Se recorre la dimension X desde 0 hasta DimensionX
            for (contadorX = 0; contadorX < DimensionX; contadorX++)
            {
                //Se recorre la dimension Y desde 0 hasta DimensionY
                for (contadorY = 0; contadorY < DimensionY; contadorY++)
                {
                    //Se crea un nuevo objeto de tipo JButton
                    JLabel lblNuevo=new JLabel();
                    //Se le asignan sus dimensiones (ancho, alto)
                    lblNuevo.setSize(TamX, TamY);
                    lblNuevo.setBorder(BorderFactory.createLineBorder(Color.black, 1, true));
                    if (personajesY[0]==contadorY && personajesX[0]==contadorX) {
                        ImageIcon prin1=new ImageIcon(getClass().getResource("/imagenes/princesa1.png"));
                        ImageIcon p1=new ImageIcon(prin1.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                        lblNuevo.setIcon(p1);
                    }
                    if (personajesY[1]==contadorY && personajesX[1]==contadorX) {
                        ImageIcon prin2=new ImageIcon(getClass().getResource("/imagenes/princesa2.png"));
                        ImageIcon p2=new ImageIcon(prin2.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                        lblNuevo.setIcon(p2);
                    }
                    if (personajesY[2]==contadorY && personajesX[2]==contadorX) {
                        ImageIcon mago1=new ImageIcon(getClass().getResource("/imagenes/Mago1.png"));
                        ImageIcon m1=new ImageIcon(mago1.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                        lblNuevo.setIcon(m1);
                    }
                    if (personajesY[3]==contadorY && personajesX[3]==contadorX) {
                        ImageIcon mago2=new ImageIcon(getClass().getResource("/imagenes/Mago2.png"));
                        ImageIcon m2=new ImageIcon(mago2.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                        lblNuevo.setIcon(m2);
                    }
                    if (personajesY[4]==contadorY && personajesX[4]==contadorX) {
                        ImageIcon guer1=new ImageIcon(getClass().getResource("/imagenes/guerrero1.png"));
                        ImageIcon g1=new ImageIcon(guer1.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                        lblNuevo.setIcon(g1);
                    }
                    if (personajesY[5]==contadorY && personajesX[5]==contadorX) {
                        ImageIcon guer2=new ImageIcon(getClass().getResource("/imagenes/guerrero2.png"));
                        ImageIcon g2=new ImageIcon(guer2.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                        lblNuevo.setIcon(g2);
                    }
                    if (cantVidas>=3) {
                        if (vidasX[0]==contadorY && vidasY[0]==contadorX) {
                        ImageIcon cora=new ImageIcon(getClass().getResource("/imagenes/corazon.png"));
                        ImageIcon c=new ImageIcon(cora.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                        lblNuevo.setIcon(c);
                        }
                    }
                    if (cantVidas>=3) {
                        if (vidasX[1]==contadorY && vidasY[1]==contadorX) {
                        ImageIcon cora=new ImageIcon(getClass().getResource("/imagenes/corazon.png"));
                        ImageIcon c=new ImageIcon(cora.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                        lblNuevo.setIcon(c);
                        }
                    }
                    if (cantVidas>=3) {
                        if (vidasX[2]==contadorY && vidasY[2]==contadorX) {
                        ImageIcon cora=new ImageIcon(getClass().getResource("/imagenes/corazon.png"));
                        ImageIcon c=new ImageIcon(cora.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                        lblNuevo.setIcon(c);
                    }
                    }
                    if (cantVidas>=4) {
                        if (vidasX[3]==contadorY && vidasY[3]==contadorX) {
                        ImageIcon cora=new ImageIcon(getClass().getResource("/imagenes/corazon.png"));
                        ImageIcon c=new ImageIcon(cora.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                        lblNuevo.setIcon(c);
                        }
                    }
                    if (cantVidas>=5) {
                        if (vidasX[4]==contadorY && vidasY[4]==contadorX) {
                        ImageIcon cora=new ImageIcon(getClass().getResource("/imagenes/corazon.png"));
                        ImageIcon c=new ImageIcon(cora.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                        lblNuevo.setIcon(c);
                        }
                    }
                    if (cantVidas>=6) {
                        if (vidasX[5]==contadorY && vidasY[5]==contadorX) {
                        ImageIcon cora=new ImageIcon(getClass().getResource("/imagenes/corazon.png"));
                        ImageIcon c=new ImageIcon(cora.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                        lblNuevo.setIcon(c);
                        }
                    }
                    if (cantVidas>=7) {
                        if (vidasX[6]==contadorY && vidasY[6]==contadorX) {
                        ImageIcon cora=new ImageIcon(getClass().getResource("/imagenes/corazon.png"));
                        ImageIcon c=new ImageIcon(cora.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                        lblNuevo.setIcon(c);
                        }
                    }
                    if ( cantVidas>=8) {
                        if (vidasX[7]==contadorY && vidasY[7]==contadorX) {
                        ImageIcon cora=new ImageIcon(getClass().getResource("/imagenes/corazon.png"));
                        ImageIcon c=new ImageIcon(cora.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                        lblNuevo.setIcon(c);
                        }
                    }
                    if (cantVidas>=9) {
                        if (vidasX[8]==contadorY && vidasY[8]==contadorX) {
                        ImageIcon cora=new ImageIcon(getClass().getResource("/imagenes/corazon.png"));
                        ImageIcon c=new ImageIcon(cora.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                        lblNuevo.setIcon(c);
                        }
                    }
                    if (cantVidas>=11) {
                        if (vidasX[9]==contadorY && vidasY[9]==contadorX) {
                        ImageIcon cora=new ImageIcon(getClass().getResource("/imagenes/corazon.png"));
                        ImageIcon c=new ImageIcon(cora.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                        lblNuevo.setIcon(c);
                        }
                    }
                    if (cantVidas>=11) {
                        if (vidasX[10]==contadorY && vidasY[10]==contadorX) {
                        ImageIcon cora=new ImageIcon(getClass().getResource("/imagenes/corazon.png"));
                        ImageIcon c=new ImageIcon(cora.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                        lblNuevo.setIcon(c);
                        }
                    }
                    if (cantVidas>=12) {
                        if (vidasX[11]==contadorY && vidasY[11]==contadorX) {
                        ImageIcon cora=new ImageIcon(getClass().getResource("/imagenes/corazon.png"));
                        ImageIcon c=new ImageIcon(cora.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                        lblNuevo.setIcon(c);
                        }
                    }
                    if (cantVidas>=14) {
                        if (vidasX[12]==contadorY && vidasY[12]==contadorX) {
                        ImageIcon cora=new ImageIcon(getClass().getResource("/imagenes/corazon.png"));
                        ImageIcon c=new ImageIcon(cora.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                        lblNuevo.setIcon(c);
                        }
                    }
                    if (cantVidas>=14) {
                        if (vidasX[13]==contadorY && vidasY[13]==contadorX) {
                        ImageIcon cora=new ImageIcon(getClass().getResource("/imagenes/corazon.png"));
                        ImageIcon c=new ImageIcon(cora.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                        lblNuevo.setIcon(c);
                        }
                    }
                    if (cantVidas>=16) {
                        if (vidasX[14]==contadorY && vidasY[14]==contadorX) {
                        ImageIcon cora=new ImageIcon(getClass().getResource("/imagenes/corazon.png"));
                        ImageIcon c=new ImageIcon(cora.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                        lblNuevo.setIcon(c);
                        }
                    }
                    if (cantVidas>=16) {
                        if (vidasX[15]==contadorY && vidasY[15]==contadorX) {
                        ImageIcon cora=new ImageIcon(getClass().getResource("/imagenes/corazon.png"));
                        ImageIcon c=new ImageIcon(cora.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                        lblNuevo.setIcon(c);
                        }
                    }
                    if (cantBombas>=6) {
                        if (BombasX[0]==contadorY && BombasY[0]==contadorX) {
                        ImageIcon bom=new ImageIcon(getClass().getResource("/imagenes/bomba.png"));
                        ImageIcon b=new ImageIcon(bom.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                        lblNuevo.setIcon(b);
                        }
                    }
                    if (cantBombas>=6) {
                        if (BombasX[0]==contadorY && BombasY[0]==contadorX) {
                        ImageIcon bom=new ImageIcon(getClass().getResource("/imagenes/bomba.png"));
                        ImageIcon b=new ImageIcon(bom.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                        lblNuevo.setIcon(b);
                        }
                    }
                    if (cantBombas>=6) {
                        if (BombasX[1]==contadorY && BombasY[1]==contadorX) {
                        ImageIcon bom=new ImageIcon(getClass().getResource("/imagenes/bomba.png"));
                        ImageIcon b=new ImageIcon(bom.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                        lblNuevo.setIcon(b);
                        }
                    }
                    if (cantBombas>=6) {
                        if (BombasX[2]==contadorY && BombasY[2]==contadorX) {
                        ImageIcon bom=new ImageIcon(getClass().getResource("/imagenes/bomba.png"));
                        ImageIcon b=new ImageIcon(bom.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                        lblNuevo.setIcon(b);
                        }
                    }
                    if (cantBombas>=6) {
                        if (BombasX[3]==contadorY && BombasY[4]==contadorX) {
                        ImageIcon bom=new ImageIcon(getClass().getResource("/imagenes/bomba.png"));
                        ImageIcon b=new ImageIcon(bom.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                        lblNuevo.setIcon(b);
                        }
                    }
                    if (cantBombas>=6) {
                        if (BombasX[4]==contadorY && BombasY[4]==contadorX) {
                        ImageIcon bom=new ImageIcon(getClass().getResource("/imagenes/bomba.png"));
                        ImageIcon b=new ImageIcon(bom.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                        lblNuevo.setIcon(b);
                        }
                    }
                    if (cantBombas>=6) {
                        if (BombasX[5]==contadorY && BombasY[5]==contadorX) {
                        ImageIcon bom=new ImageIcon(getClass().getResource("/imagenes/bomba.png"));
                        ImageIcon b=new ImageIcon(bom.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                        lblNuevo.setIcon(b);
                        }
                    }
                    if (cantBombas>=8) {
                        if (BombasX[6]==contadorY && BombasY[6]==contadorX) {
                        ImageIcon bom=new ImageIcon(getClass().getResource("/imagenes/bomba.png"));
                        ImageIcon b=new ImageIcon(bom.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                        lblNuevo.setIcon(b);
                        }
                    }
                    if (cantBombas>=8) {
                        if (BombasX[7]==contadorY && BombasY[7]==contadorX) {
                        ImageIcon bom=new ImageIcon(getClass().getResource("/imagenes/bomba.png"));
                        ImageIcon b=new ImageIcon(bom.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                        lblNuevo.setIcon(b);
                        }
                    }
                    if (cantBombas>=10) {
                        if (BombasX[8]==contadorY && BombasY[8]==contadorX) {
                        ImageIcon bom=new ImageIcon(getClass().getResource("/imagenes/bomba.png"));
                        ImageIcon b=new ImageIcon(bom.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                        lblNuevo.setIcon(b);
                        }
                    }
                    if (cantBombas>=10) {
                        if (BombasX[9]==contadorY && BombasY[9]==contadorX) {
                        ImageIcon bom=new ImageIcon(getClass().getResource("/imagenes/bomba.png"));
                        ImageIcon b=new ImageIcon(bom.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                        lblNuevo.setIcon(b);
                        }
                    }
                    if (cantBombas>=12) {
                        if (BombasX[10]==contadorY && BombasY[10]==contadorX) {
                        ImageIcon bom=new ImageIcon(getClass().getResource("/imagenes/bomba.png"));
                        ImageIcon b=new ImageIcon(bom.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                        lblNuevo.setIcon(b);
                        }
                    }
                    if (cantBombas>=12) {
                        if (BombasX[11]==contadorY && BombasY[11]==contadorX) {
                        ImageIcon bom=new ImageIcon(getClass().getResource("/imagenes/bomba.png"));
                        ImageIcon b=new ImageIcon(bom.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                        lblNuevo.setIcon(b);
                        }
                    }
                    if (cantBombas>=14) {
                        if (BombasX[12]==contadorY && BombasY[12]==contadorX) {
                        ImageIcon bom=new ImageIcon(getClass().getResource("/imagenes/bomba.png"));
                        ImageIcon b=new ImageIcon(bom.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                        lblNuevo.setIcon(b);
                        }
                    }
                    if (cantBombas>=14) {
                        if (BombasX[13]==contadorY && BombasY[13]==contadorX) {
                        ImageIcon bom=new ImageIcon(getClass().getResource("/imagenes/bomba.png"));
                        ImageIcon b=new ImageIcon(bom.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                        lblNuevo.setIcon(b);
                        }
                    }
                    if (cantBombas>=16) {
                        if (BombasX[14]==contadorY && BombasY[14]==contadorX) {
                        ImageIcon bom=new ImageIcon(getClass().getResource("/imagenes/bomba.png"));
                        ImageIcon b=new ImageIcon(bom.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                        lblNuevo.setIcon(b);
                        }
                    }
                    if (cantBombas>=16) {
                        if (BombasX[15]==contadorY && BombasY[15]==contadorX) {
                        ImageIcon bom=new ImageIcon(getClass().getResource("/imagenes/bomba.png"));
                        ImageIcon b=new ImageIcon(bom.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                        lblNuevo.setIcon(b);
                        }
                    }
                    if (cantBombas>=19) {
                        if (BombasX[16]==contadorY && BombasY[16]==contadorX) {
                        ImageIcon bom=new ImageIcon(getClass().getResource("/imagenes/bomba.png"));
                        ImageIcon b=new ImageIcon(bom.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                        lblNuevo.setIcon(b);
                        }
                    }
                    if (cantBombas>=19) {
                        if (BombasX[17]==contadorY && BombasY[17]==contadorX) {
                        ImageIcon bom=new ImageIcon(getClass().getResource("/imagenes/bomba.png"));
                        ImageIcon b=new ImageIcon(bom.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                        lblNuevo.setIcon(b);
                        }
                    }
                    if (cantBombas>=19) {
                        if (BombasX[18]==contadorY && BombasY[18]==contadorX) {
                        ImageIcon bom=new ImageIcon(getClass().getResource("/imagenes/bomba.png"));
                        ImageIcon b=new ImageIcon(bom.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                        lblNuevo.setIcon(b);
                        }
                    }
                    if (cantBombas>=22) {
                        if (BombasX[19]==contadorY && BombasY[19]==contadorX) {
                        ImageIcon bom=new ImageIcon(getClass().getResource("/imagenes/bomba.png"));
                        ImageIcon b=new ImageIcon(bom.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                        lblNuevo.setIcon(b);
                        }
                    }
                    if (cantBombas>=22) {
                        if (BombasX[20]==contadorY && BombasY[20]==contadorX) {
                        ImageIcon bom=new ImageIcon(getClass().getResource("/imagenes/bomba.png"));
                        ImageIcon b=new ImageIcon(bom.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                        lblNuevo.setIcon(b);
                        }
                    }
                    if (cantBombas>=22) {
                        if (BombasX[21]==contadorY && BombasY[21]==contadorX) {
                        ImageIcon bom=new ImageIcon(getClass().getResource("/imagenes/bomba.png"));
                        ImageIcon b=new ImageIcon(bom.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                        lblNuevo.setIcon(b);
                        }
                    }
                    if (cantBombas>=25) {
                        if (BombasX[22]==contadorY && BombasY[22]==contadorX) {
                        ImageIcon bom=new ImageIcon(getClass().getResource("/imagenes/bomba.png"));
                        ImageIcon b=new ImageIcon(bom.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                        lblNuevo.setIcon(b);
                        }
                    }
                    if (cantBombas>=25) {
                        if (BombasX[23]==contadorY && BombasY[23]==contadorX) {
                        ImageIcon bom=new ImageIcon(getClass().getResource("/imagenes/bomba.png"));
                        ImageIcon b=new ImageIcon(bom.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                        lblNuevo.setIcon(b);
                        }
                    }
                    if (cantBombas>=25) {
                        if (BombasX[24]==contadorY && BombasY[24]==contadorX) {
                        ImageIcon bom=new ImageIcon(getClass().getResource("/imagenes/bomba.png"));
                        ImageIcon b=new ImageIcon(bom.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                        lblNuevo.setIcon(b);
                        }
                    }
                    if (cantBombas>=28) {
                        if (BombasX[25]==contadorY && BombasY[25]==contadorX) {
                        ImageIcon bom=new ImageIcon(getClass().getResource("/imagenes/bomba.png"));
                        ImageIcon b=new ImageIcon(bom.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                        lblNuevo.setIcon(b);
                        }
                    }
                    if (cantBombas>=28) {
                        if (BombasX[26]==contadorY && BombasY[26]==contadorX) {
                        ImageIcon bom=new ImageIcon(getClass().getResource("/imagenes/bomba.png"));
                        ImageIcon b=new ImageIcon(bom.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                        lblNuevo.setIcon(b);
                        }
                    }
                    if (cantBombas>=28) {
                        if (BombasX[27]==contadorY && BombasY[27]==contadorX) {
                        ImageIcon bom=new ImageIcon(getClass().getResource("/imagenes/bomba.png"));
                        ImageIcon b=new ImageIcon(bom.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                        lblNuevo.setIcon(b);
                        }
                    }
                    if (cantBombas>=32) {
                        if (BombasX[28]==contadorY && BombasY[28]==contadorX) {
                        ImageIcon bom=new ImageIcon(getClass().getResource("/imagenes/bomba.png"));
                        ImageIcon b=new ImageIcon(bom.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                        lblNuevo.setIcon(b);
                        }
                    }
                    if (cantBombas>=32) {
                        if (BombasX[29]==contadorY && BombasY[29]==contadorX) {
                        ImageIcon bom=new ImageIcon(getClass().getResource("/imagenes/bomba.png"));
                        ImageIcon b=new ImageIcon(bom.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                        lblNuevo.setIcon(b);
                        }
                    }
                    if (cantBombas>=32) {
                        if (BombasX[30]==contadorY && BombasY[30]==contadorX) {
                        ImageIcon bom=new ImageIcon(getClass().getResource("/imagenes/bomba.png"));
                        ImageIcon b=new ImageIcon(bom.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                        lblNuevo.setIcon(b);
                        }
                    }
                    if (cantBombas>=32) {
                        if (BombasX[31]==contadorY && BombasY[31]==contadorX) {
                        ImageIcon bom=new ImageIcon(getClass().getResource("/imagenes/bomba.png"));
                        ImageIcon b=new ImageIcon(bom.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                        lblNuevo.setIcon(b);
                        }
                    }
                    
                    //Se agrega a la matriz el botón recien creado
                    MatrizLabels[contadorX][contadorY] = lblNuevo;
                    //Se agrega un nuevo evento que maneje la acción clic sobre el botón creado
                   
                    //Se agrega al panel 
                    pnlTablero.add(MatrizLabels[contadorX][contadorY]);
                    //Se redibuja el panel
                    RedibujarTablero();
                }//Fin For - Y
            }//Fin For - X
        }//Fin If - ValidaDimensiones
        else
        {
            JOptionPane.showMessageDialog(this, "Las Dimensiones a ingresar deben ser númericas y en un rango de entre 8 y 18");
        }//Fin if - ValidaDimensiones - false
    }//GEN-LAST:event_btnCrearActionPerformed

    /**
     * Metodo que redibuja el elemto pnlTablero
     */
    private void RedibujarTablero()
    {
        //Se valida los componentes del elemento pnlTablero
        pnlTablero.validate();
        //Se redibuja el elemento pnlTablero y sus componentes hijos
        pnlTablero.repaint();
    }
    
    private void btnDestruirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDestruirActionPerformed
        //Se valida que hayan elementos en el panel
        if (HayElementos())
        {
            //Se recorre la matriz de botones y se elimina cada elemento de la matríz
            for (int x = 0; x < DimensionX; x++)
            {
                for (int y = 0; y < DimensionX; y++)
                {
                    MatrizLabels[x][y] = null;
                }//Fin For - y
            }//Fin For - x
            //Se remueven todos los elementos hijos del JPanel pnlTablero
            pnlTablero.removeAll();
            //Se redibuja el panel
            RedibujarTablero();
        btnCrear.setEnabled(true);
        }//Fin if HayElementos
        
    }//GEN-LAST:event_btnDestruirActionPerformed

    private void ArribaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ArribaActionPerformed
        if (Turno.equalsIgnoreCase("princesa") && cambio==true) {
            Thread moverAr=new Thread(){
                public void run()  {
                    try {
                        int contador=0;
                        int mo=0;
                        int j=0;
                        int k=0;
                        boolean hay=true;
                        boolean hay1=false;
                        boolean hay2=false;
                        boolean hay3=true;
                        boolean hay4=false;
                        boolean hay5=false;
                        contador=personajesX[0]-dado;
                        while(contador<personajesX[0]){
                            hay=true;
                            hay3=true;
                            if (contador<0) {
                                contador=0;
                            }
                            if (hay) {
                                for (int i = 0; i <vidasX.length; i++) {
                                    if (personajesX[0]-1==vidasY[i] && personajesY[0]==vidasX[i]) {
                                        hay1=true;
                                        j=i;
                                    }
                                }
                                hay=false;
                            }
                            if (hay3) {
                                for (int i = 0; i <BombasX.length; i++) {
                                    if (personajesX[0]-1==BombasY[i] && personajesY[0]==BombasX[i]) {
                                        hay4=true;
                                        k=i;
                                    }
                                }
                                hay3=false;
                            }
                            
                            MatrizLabels[personajesX[0]+mo][personajesY[0]].setIcon(null);
                            if (hay2) {
                                ImageIcon cora=new ImageIcon(getClass().getResource("/imagenes/corazon.png"));
                                ImageIcon c=new ImageIcon(cora.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                                MatrizLabels[vidasY[j]][vidasX[j]].setIcon(c);
                                hay2=false;
                            }
                            if (hay5) {
                                ImageIcon bom=new ImageIcon(getClass().getResource("/imagenes/bomba.png"));
                                ImageIcon b=new ImageIcon(bom.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                                MatrizLabels[BombasY[k]][BombasX[k]].setIcon(b);
                                hay5=false;
                            }
                            personajesX[0]--;
                            ImageIcon prin1=new ImageIcon(getClass().getResource("/imagenes/princesa1.png"));
                            ImageIcon p1=new ImageIcon(prin1.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                            MatrizLabels[personajesX[0]][personajesY[0]].setIcon(p1);
                            if (hay1) {
                                hay1=false;
                                hay2=true;
                            }
                            if (hay4) {
                                hay4=false;
                                hay5=true;
                            }
                            RedibujarTablero();
                            sleep(500);
                            }
                    } catch (InterruptedException ex) {
                        Logger.getLogger(frmTablero.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            };
        moverAr.start();
        
        }
        if (Turno.equalsIgnoreCase("princesa") && cambio==false) {
            Thread moverAr=new Thread(){
                public void run()  {
                    try {
                        int contador=0;
                        int mo=0;
                        int j=0;
                        int k=0;
                        boolean hay=true;
                        boolean hay1=false;
                        boolean hay2=false;
                        boolean hay3=true;
                        boolean hay4=false;
                        boolean hay5=false;
                        contador=personajesX[1]-dado;
                        while(contador<personajesX[1]){
                            hay=true;
                            hay3=true;
                            if (contador<0) {
                                contador=0;
                            }
                            if (hay) {
                                for (int i = 0; i <vidasX.length; i++) {
                                    if (personajesX[1]-1==vidasY[i] && personajesY[1]==vidasX[i]) {
                                        hay1=true;
                                        j=i;
                                    }
                                }
                                hay=false;
                            }
                            if (hay3) {
                                for (int i = 0; i <BombasX.length; i++) {
                                    if (personajesX[1]-1==BombasY[i] && personajesY[1]==BombasX[i]) {
                                        hay4=true;
                                        k=i;
                                    }
                                }
                                hay3=false;
                            }
                            
                            MatrizLabels[personajesX[1]+mo][personajesY[1]].setIcon(null);
                            if (hay2) {
                                ImageIcon cora=new ImageIcon(getClass().getResource("/imagenes/corazon.png"));
                                ImageIcon c=new ImageIcon(cora.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                                MatrizLabels[vidasY[j]][vidasX[j]].setIcon(c);
                                hay2=false;
                            }
                            if (hay5) {
                                ImageIcon bom=new ImageIcon(getClass().getResource("/imagenes/bomba.png"));
                                ImageIcon b=new ImageIcon(bom.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                                MatrizLabels[BombasY[k]][BombasX[k]].setIcon(b);
                                hay5=false;
                            }
                            personajesX[1]--;
                            ImageIcon prin2=new ImageIcon(getClass().getResource("/imagenes/princesa2.png"));
                            ImageIcon p2=new ImageIcon(prin2.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                            MatrizLabels[personajesX[1]][personajesY[1]].setIcon(p2);
                            if (hay1) {
                                hay1=false;
                                hay2=true;
                            }
                            if (hay4) {
                                hay4=false;
                                hay5=true;
                            }
                            RedibujarTablero();
                            sleep(500);
                            }
                    } catch (InterruptedException ex) {
                        Logger.getLogger(frmTablero.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            };
        moverAr.start();
        
        }
        if (Turno.equalsIgnoreCase("guerrero") && cambio==true) {
            Thread moverAr=new Thread(){
                public void run()  {
                    try {
                        int contador=0;
                        int mo=0;
                        int j=0;
                        int k=0;
                        boolean hay=true;
                        boolean hay1=false;
                        boolean hay2=false;
                        boolean hay3=true;
                        boolean hay4=false;
                        boolean hay5=false;
                        contador=personajesX[2]-dado;
                        while(contador<personajesX[2]){
                            hay=true;
                            hay3=true;
                            if (contador<0) {
                                contador=0;
                            }
                            if (hay) {
                                for (int i = 0; i <vidasX.length; i++) {
                                    if (personajesX[2]-1==vidasY[i] && personajesY[2]==vidasX[i]) {
                                        hay1=true;
                                        j=i;
                                    }
                                }
                                hay=false;
                            }
                            if (hay3) {
                                for (int i = 0; i <BombasX.length; i++) {
                                    if (personajesX[2]-1==BombasY[i] && personajesY[2]==BombasX[i]) {
                                        hay4=true;
                                        k=i;
                                    }
                                }
                                hay3=false;
                            }
                            
                            MatrizLabels[personajesX[2]+mo][personajesY[2]].setIcon(null);
                            if (hay2) {
                                ImageIcon cora=new ImageIcon(getClass().getResource("/imagenes/corazon.png"));
                                ImageIcon c=new ImageIcon(cora.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                                MatrizLabels[vidasY[j]][vidasX[j]].setIcon(c);
                                hay2=false;
                            }
                            if (hay5) {
                                ImageIcon bom=new ImageIcon(getClass().getResource("/imagenes/bomba.png"));
                                ImageIcon b=new ImageIcon(bom.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                                MatrizLabels[BombasY[k]][BombasX[k]].setIcon(b);
                                hay5=false;
                            }
                            personajesX[2]--;
                            ImageIcon prin2=new ImageIcon(getClass().getResource("/imagenes/guerrero1.png"));
                            ImageIcon p2=new ImageIcon(prin2.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                            MatrizLabels[personajesX[2]][personajesY[2]].setIcon(p2);
                            if (hay1) {
                                hay1=false;
                                hay2=true;
                            }
                            if (hay4) {
                                hay4=false;
                                hay5=true;
                            }
                            RedibujarTablero();
                            sleep(500);
                            }
                    } catch (InterruptedException ex) {
                        Logger.getLogger(frmTablero.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            };
        moverAr.start();
        
        }
        if (Turno.equalsIgnoreCase("guerrero") && cambio==false) {
            Thread moverAr=new Thread(){
                public void run()  {
                    try {
                        int contador=0;
                        int mo=0;
                        int j=0;
                        int k=0;
                        boolean hay=true;
                        boolean hay1=false;
                        boolean hay2=false;
                        boolean hay3=true;
                        boolean hay4=false;
                        boolean hay5=false;
                        contador=personajesX[3]-dado;
                        while(contador<personajesX[3]){
                            hay=true;
                            hay3=true;
                            if (contador<0) {
                                contador=0;
                            }
                            if (hay) {
                                for (int i = 0; i <vidasX.length; i++) {
                                    if (personajesX[3]-1==vidasY[i] && personajesY[3]==vidasX[i]) {
                                        hay1=true;
                                        j=i;
                                    }
                                }
                                hay=false;
                            }
                            if (hay3) {
                                for (int i = 0; i <BombasX.length; i++) {
                                    if (personajesX[3]-1==BombasY[i] && personajesY[3]==BombasX[i]) {
                                        hay4=true;
                                        k=i;
                                    }
                                }
                                hay3=false;
                            }
                            
                            MatrizLabels[personajesX[3]+mo][personajesY[3]].setIcon(null);
                            if (hay2) {
                                ImageIcon cora=new ImageIcon(getClass().getResource("/imagenes/corazon.png"));
                                ImageIcon c=new ImageIcon(cora.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                                MatrizLabels[vidasY[j]][vidasX[j]].setIcon(c);
                                hay2=false;
                            }
                            if (hay5) {
                                ImageIcon bom=new ImageIcon(getClass().getResource("/imagenes/bomba.png"));
                                ImageIcon b=new ImageIcon(bom.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                                MatrizLabels[BombasY[k]][BombasX[k]].setIcon(b);
                                hay5=false;
                            }
                            personajesX[3]--;
                            ImageIcon prin2=new ImageIcon(getClass().getResource("/imagenes/guerrero2.png"));
                            ImageIcon p2=new ImageIcon(prin2.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                            MatrizLabels[personajesX[3]][personajesY[3]].setIcon(p2);
                            if (hay1) {
                                hay1=false;
                                hay2=true;
                            }
                            if (hay4) {
                                hay4=false;
                                hay5=true;
                            }
                            RedibujarTablero();
                            sleep(500);
                            }
                    } catch (InterruptedException ex) {
                        Logger.getLogger(frmTablero.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            };
        moverAr.start();
        
        }
        if (Turno.equalsIgnoreCase("mago") && cambio==true) {
            Thread moverAr=new Thread(){
                public void run()  {
                    try {
                        int contador=0;
                        int mo=0;
                        int j=0;
                        int k=0;
                        boolean hay=true;
                        boolean hay1=false;
                        boolean hay2=false;
                        boolean hay3=true;
                        boolean hay4=false;
                        boolean hay5=false;
                        contador=personajesX[4]-dado;
                        while(contador<personajesX[4]){
                            hay=true;
                            hay3=true;
                            if (contador<0) {
                                contador=0;
                            }
                            if (hay) {
                                for (int i = 0; i <vidasX.length; i++) {
                                    if (personajesX[4]-1==vidasY[i] && personajesY[4]==vidasX[i]) {
                                        hay1=true;
                                        j=i;
                                    }
                                }
                                hay=false;
                            }
                            if (hay3) {
                                for (int i = 0; i <BombasX.length; i++) {
                                    if (personajesX[4]-1==BombasY[i] && personajesY[4]==BombasX[i]) {
                                        hay4=true;
                                        k=i;
                                    }
                                }
                                hay3=false;
                            }
                            
                            MatrizLabels[personajesX[4]+mo][personajesY[4]].setIcon(null);
                            if (hay2) {
                                ImageIcon cora=new ImageIcon(getClass().getResource("/imagenes/corazon.png"));
                                ImageIcon c=new ImageIcon(cora.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                                MatrizLabels[vidasY[j]][vidasX[j]].setIcon(c);
                                hay2=false;
                            }
                            if (hay5) {
                                ImageIcon bom=new ImageIcon(getClass().getResource("/imagenes/bomba.png"));
                                ImageIcon b=new ImageIcon(bom.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                                MatrizLabels[BombasY[k]][BombasX[k]].setIcon(b);
                                hay5=false;
                            }
                            personajesX[4]--;
                            ImageIcon prin2=new ImageIcon(getClass().getResource("/imagenes/Mago1.png"));
                            ImageIcon p2=new ImageIcon(prin2.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                            MatrizLabels[personajesX[4]][personajesY[4]].setIcon(p2);
                            if (hay1) {
                                hay1=false;
                                hay2=true;
                            }
                            if (hay4) {
                                hay4=false;
                                hay5=true;
                            }
                            RedibujarTablero();
                            sleep(500);
                            }
                    } catch (InterruptedException ex) {
                        Logger.getLogger(frmTablero.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            };
        moverAr.start();
        
        }
        if (Turno.equalsIgnoreCase("mago") && cambio==false) {
            Thread moverAr=new Thread(){
                public void run()  {
                    try {
                        int contador=0;
                        int mo=0;
                        int j=0;
                        int k=0;
                        boolean hay=true;
                        boolean hay1=false;
                        boolean hay2=false;
                        boolean hay3=true;
                        boolean hay4=false;
                        boolean hay5=false;
                        contador=personajesX[5]-dado;
                        while(contador<personajesX[5]){
                            hay=true;
                            hay3=true;
                            if (contador<0) {
                                contador=0;
                            }
                            if (hay) {
                                for (int i = 0; i <vidasX.length; i++) {
                                    if (personajesX[5]-1==vidasY[i] && personajesY[5]==vidasX[i]) {
                                        hay1=true;
                                        j=i;
                                    }
                                }
                                hay=false;
                            }
                            if (hay3) {
                                for (int i = 0; i <BombasX.length; i++) {
                                    if (personajesX[5]-1==BombasY[i] && personajesY[5]==BombasX[i]) {
                                        hay4=true;
                                        k=i;
                                    }
                                }
                                hay3=false;
                            }
                            
                            MatrizLabels[personajesX[5]+mo][personajesY[5]].setIcon(null);
                            if (hay2) {
                                ImageIcon cora=new ImageIcon(getClass().getResource("/imagenes/corazon.png"));
                                ImageIcon c=new ImageIcon(cora.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                                MatrizLabels[vidasY[j]][vidasX[j]].setIcon(c);
                                hay2=false;
                            }
                            if (hay5) {
                                ImageIcon bom=new ImageIcon(getClass().getResource("/imagenes/bomba.png"));
                                ImageIcon b=new ImageIcon(bom.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                                MatrizLabels[BombasY[k]][BombasX[k]].setIcon(b);
                                hay5=false;
                            }
                            personajesX[5]--;
                            ImageIcon prin2=new ImageIcon(getClass().getResource("/imagenes/Mago2.png"));
                            ImageIcon p2=new ImageIcon(prin2.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                            MatrizLabels[personajesX[5]][personajesY[5]].setIcon(p2);
                            if (hay1) {
                                hay1=false;
                                hay2=true;
                            }
                            if (hay4) {
                                hay4=false;
                                hay5=true;
                            }
                            RedibujarTablero();
                            sleep(500);
                            }
                    } catch (InterruptedException ex) {
                        Logger.getLogger(frmTablero.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            };
        moverAr.start();
        
        }
        cambio=!cambio;
        System.out.println("cambio"+cambio);
    }//GEN-LAST:event_ArribaActionPerformed

    private void TirarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TirarActionPerformed
        dado=generaNumAleatorio(1,6);
        String cadena="";
        cadena=String.valueOf(dado);
        Numero.setText(cadena);
        if (cambio==true) {
            Turno=oden1[turno];
            
        }
        if (cambio==false) {
            Turno=oden2[turno];
            turno++;
        }
        if (turno>2) {
            turno=0;
        }
        System.out.println("tomado"+cambio);
    }//GEN-LAST:event_TirarActionPerformed

    private void AbajoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AbajoActionPerformed
        if (Turno.equalsIgnoreCase("princesa") && cambio==true) {
            Thread moverAb=new Thread(){
                public void run()  {
                    try {
                        int contador=0;
                        int mo=0;
                        int j=0;
                        int k=0;
                        boolean hay=true;
                        boolean hay1=false;
                        boolean hay2=false;
                        boolean hay3=true;
                        boolean hay4=false;
                        boolean hay5=false;
                        contador=personajesX[0]+dado;
                        while(contador>personajesX[0]){
                            hay=true;
                            hay3=true;
                            if (contador<0) {
                                contador=0;
                            }
                            if (hay) {
                                for (int i = 0; i <vidasX.length; i++) {
                                    if (personajesX[0]+1==vidasY[i] && personajesY[0]==vidasX[i]) {
                                        hay1=true;
                                        j=i;
                                    }
                                }
                                hay=false;
                            }
                            if (hay3) {
                                for (int i = 0; i <BombasX.length; i++) {
                                    if (personajesX[0]+1==BombasY[i] && personajesY[0]==BombasX[i]) {
                                        hay4=true;
                                        k=i;
                                    }
                                }
                                hay3=false;
                            }
                            
                            MatrizLabels[personajesX[0]+mo][personajesY[0]].setIcon(null);
                            if (hay2) {
                                ImageIcon cora=new ImageIcon(getClass().getResource("/imagenes/corazon.png"));
                                ImageIcon c=new ImageIcon(cora.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                                MatrizLabels[vidasY[j]][vidasX[j]].setIcon(c);
                                hay2=false;
                            }
                            if (hay5) {
                                ImageIcon bom=new ImageIcon(getClass().getResource("/imagenes/bomba.png"));
                                ImageIcon b=new ImageIcon(bom.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                                MatrizLabels[BombasY[k]][BombasX[k]].setIcon(b);
                                hay5=false;
                            }
                            personajesX[0]++;
                            ImageIcon prin1=new ImageIcon(getClass().getResource("/imagenes/princesa1.png"));
                            ImageIcon p1=new ImageIcon(prin1.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                            MatrizLabels[personajesX[0]][personajesY[0]].setIcon(p1);
                            if (hay1) {
                                hay1=false;
                                hay2=true;
                            }
                            if (hay4) {
                                hay4=false;
                                hay5=true;
                            }
                            RedibujarTablero();
                            sleep(500);
                            }
                    } catch (InterruptedException ex) {
                        Logger.getLogger(frmTablero.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            };
        moverAb.start();
        }
        if (Turno.equalsIgnoreCase("princesa") && cambio==false) {
            Thread moverAb=new Thread(){
                public void run()  {
                    try {
                        int contador=0;
                        int mo=0;
                        int j=0;
                        int k=0;
                        boolean hay=true;
                        boolean hay1=false;
                        boolean hay2=false;
                        boolean hay3=true;
                        boolean hay4=false;
                        boolean hay5=false;
                        contador=personajesX[1]+dado;
                        while(contador>personajesX[1]){
                            hay=true;
                            hay3=true;
                            if (contador<0) {
                                contador=0;
                            }
                            if (hay) {
                                for (int i = 0; i <vidasX.length; i++) {
                                    if (personajesX[1]+1==vidasY[i] && personajesY[1]==vidasX[i]) {
                                        hay1=true;
                                        j=i;
                                    }
                                }
                                hay=false;
                            }
                            if (hay3) {
                                for (int i = 0; i <BombasX.length; i++) {
                                    if (personajesX[1]+1==BombasY[i] && personajesY[1]==BombasX[i]) {
                                        hay4=true;
                                        k=i;
                                    }
                                }
                                hay3=false;
                            }
                            
                            MatrizLabels[personajesX[1]+mo][personajesY[1]].setIcon(null);
                            if (hay2) {
                                ImageIcon cora=new ImageIcon(getClass().getResource("/imagenes/corazon.png"));
                                ImageIcon c=new ImageIcon(cora.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                                MatrizLabels[vidasY[j]][vidasX[j]].setIcon(c);
                                hay2=false;
                            }
                            if (hay5) {
                                ImageIcon bom=new ImageIcon(getClass().getResource("/imagenes/bomba.png"));
                                ImageIcon b=new ImageIcon(bom.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                                MatrizLabels[BombasY[k]][BombasX[k]].setIcon(b);
                                hay5=false;
                            }
                            personajesX[1]++;
                            ImageIcon prin1=new ImageIcon(getClass().getResource("/imagenes/princesa2.png"));
                            ImageIcon p1=new ImageIcon(prin1.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                            MatrizLabels[personajesX[1]][personajesY[1]].setIcon(p1);
                            if (hay1) {
                                hay1=false;
                                hay2=true;
                            }
                            if (hay4) {
                                hay4=false;
                                hay5=true;
                            }
                            RedibujarTablero();
                            sleep(500);
                            }
                    } catch (InterruptedException ex) {
                        Logger.getLogger(frmTablero.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            };
        moverAb.start();
        }
        if (Turno.equalsIgnoreCase("guerrero") && cambio==true) {
            Thread moverAb=new Thread(){
                public void run()  {
                    try {
                        int contador=0;
                        int mo=0;
                        int j=0;
                        int k=0;
                        boolean hay=true;
                        boolean hay1=false;
                        boolean hay2=false;
                        boolean hay3=true;
                        boolean hay4=false;
                        boolean hay5=false;
                        contador=personajesX[2]+dado;
                        while(contador>personajesX[2]){
                            hay=true;
                            hay3=true;
                            if (contador<0) {
                                contador=0;
                            }
                            if (hay) {
                                for (int i = 0; i <vidasX.length; i++) {
                                    if (personajesX[2]+1==vidasY[i] && personajesY[2]==vidasX[i]) {
                                        hay1=true;
                                        j=i;
                                    }
                                }
                                hay=false;
                            }
                            if (hay3) {
                                for (int i = 0; i <BombasX.length; i++) {
                                    if (personajesX[2]+1==BombasY[i] && personajesY[2]==BombasX[i]) {
                                        hay4=true;
                                        k=i;
                                    }
                                }
                                hay3=false;
                            }
                            
                            MatrizLabels[personajesX[2]+mo][personajesY[2]].setIcon(null);
                            if (hay2) {
                                ImageIcon cora=new ImageIcon(getClass().getResource("/imagenes/corazon.png"));
                                ImageIcon c=new ImageIcon(cora.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                                MatrizLabels[vidasY[j]][vidasX[j]].setIcon(c);
                                hay2=false;
                            }
                            if (hay5) {
                                ImageIcon bom=new ImageIcon(getClass().getResource("/imagenes/bomba.png"));
                                ImageIcon b=new ImageIcon(bom.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                                MatrizLabels[BombasY[k]][BombasX[k]].setIcon(b);
                                hay5=false;
                            }
                            personajesX[2]++;
                            ImageIcon prin1=new ImageIcon(getClass().getResource("/imagenes/guerrero1.png"));
                            ImageIcon p1=new ImageIcon(prin1.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                            MatrizLabels[personajesX[2]][personajesY[2]].setIcon(p1);
                            if (hay1) {
                                hay1=false;
                                hay2=true;
                            }
                            if (hay4) {
                                hay4=false;
                                hay5=true;
                            }
                            RedibujarTablero();
                            sleep(500);
                            }
                    } catch (InterruptedException ex) {
                        Logger.getLogger(frmTablero.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            };
        moverAb.start();
        }
        if (Turno.equalsIgnoreCase("guerrero") && cambio==false) {
            Thread moverAb=new Thread(){
                public void run()  {
                    try {
                        int contador=0;
                        int mo=0;
                        int j=0;
                        int k=0;
                        boolean hay=true;
                        boolean hay1=false;
                        boolean hay2=false;
                        boolean hay3=true;
                        boolean hay4=false;
                        boolean hay5=false;
                        contador=personajesX[3]+dado;
                        while(contador>personajesX[3]){
                            hay=true;
                            hay3=true;
                            if (contador<0) {
                                contador=0;
                            }
                            if (hay) {
                                for (int i = 0; i <vidasX.length; i++) {
                                    if (personajesX[3]+1==vidasY[i] && personajesY[3]==vidasX[i]) {
                                        hay1=true;
                                        j=i;
                                    }
                                }
                                hay=false;
                            }
                            if (hay3) {
                                for (int i = 0; i <BombasX.length; i++) {
                                    if (personajesX[3]+1==BombasY[i] && personajesY[3]==BombasX[i]) {
                                        hay4=true;
                                        k=i;
                                    }
                                }
                                hay3=false;
                            }
                            
                            MatrizLabels[personajesX[3]+mo][personajesY[3]].setIcon(null);
                            if (hay2) {
                                ImageIcon cora=new ImageIcon(getClass().getResource("/imagenes/corazon.png"));
                                ImageIcon c=new ImageIcon(cora.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                                MatrizLabels[vidasY[j]][vidasX[j]].setIcon(c);
                                hay2=false;
                            }
                            if (hay5) {
                                ImageIcon bom=new ImageIcon(getClass().getResource("/imagenes/bomba.png"));
                                ImageIcon b=new ImageIcon(bom.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                                MatrizLabels[BombasY[k]][BombasX[k]].setIcon(b);
                                hay5=false;
                            }
                            personajesX[3]++;
                            ImageIcon prin1=new ImageIcon(getClass().getResource("/imagenes/guerrero2.png"));
                            ImageIcon p1=new ImageIcon(prin1.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                            MatrizLabels[personajesX[3]][personajesY[3]].setIcon(p1);
                            if (hay1) {
                                hay1=false;
                                hay2=true;
                            }
                            if (hay4) {
                                hay4=false;
                                hay5=true;
                            }
                            RedibujarTablero();
                            sleep(500);
                            }
                    } catch (InterruptedException ex) {
                        Logger.getLogger(frmTablero.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            };
        moverAb.start();
        }
        if (Turno.equalsIgnoreCase("mago") && cambio==true) {
            Thread moverAb=new Thread(){
                public void run()  {
                    try {
                        int contador=0;
                        int mo=0;
                        int j=0;
                        int k=0;
                        boolean hay=true;
                        boolean hay1=false;
                        boolean hay2=false;
                        boolean hay3=true;
                        boolean hay4=false;
                        boolean hay5=false;
                        contador=personajesX[4]+dado;
                        while(contador>personajesX[4]){
                            hay=true;
                            hay3=true;
                            if (contador<0) {
                                contador=0;
                            }
                            if (hay) {
                                for (int i = 0; i <vidasX.length; i++) {
                                    if (personajesX[4]+1==vidasY[i] && personajesY[4]==vidasX[i]) {
                                        hay1=true;
                                        j=i;
                                    }
                                }
                                hay=false;
                            }
                            if (hay3) {
                                for (int i = 0; i <BombasX.length; i++) {
                                    if (personajesX[4]+1==BombasY[i] && personajesY[4]==BombasX[i]) {
                                        hay4=true;
                                        k=i;
                                    }
                                }
                                hay3=false;
                            }
                            
                            MatrizLabels[personajesX[4]+mo][personajesY[4]].setIcon(null);
                            if (hay2) {
                                ImageIcon cora=new ImageIcon(getClass().getResource("/imagenes/corazon.png"));
                                ImageIcon c=new ImageIcon(cora.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                                MatrizLabels[vidasY[j]][vidasX[j]].setIcon(c);
                                hay2=false;
                            }
                            if (hay5) {
                                ImageIcon bom=new ImageIcon(getClass().getResource("/imagenes/bomba.png"));
                                ImageIcon b=new ImageIcon(bom.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                                MatrizLabels[BombasY[k]][BombasX[k]].setIcon(b);
                                hay5=false;
                            }
                            personajesX[4]++;
                            ImageIcon prin1=new ImageIcon(getClass().getResource("/imagenes/Mago1.png"));
                            ImageIcon p1=new ImageIcon(prin1.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                            MatrizLabels[personajesX[4]][personajesY[4]].setIcon(p1);
                            if (hay1) {
                                hay1=false;
                                hay2=true;
                            }
                            if (hay4) {
                                hay4=false;
                                hay5=true;
                            }
                            RedibujarTablero();
                            sleep(500);
                            }
                    } catch (InterruptedException ex) {
                        Logger.getLogger(frmTablero.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            };
        moverAb.start();
        }
        if (Turno.equalsIgnoreCase("mago") && cambio==false) {
            Thread moverAb=new Thread(){
                public void run()  {
                    try {
                        int contador=0;
                        int mo=0;
                        int j=0;
                        int k=0;
                        boolean hay=true;
                        boolean hay1=false;
                        boolean hay2=false;
                        boolean hay3=true;
                        boolean hay4=false;
                        boolean hay5=false;
                        contador=personajesX[5]+dado;
                        while(contador>personajesX[5]){
                            hay=true;
                            hay3=true;
                            if (contador<0) {
                                contador=0;
                            }
                            if (hay) {
                                for (int i = 0; i <vidasX.length; i++) {
                                    if (personajesX[5]+1==vidasY[i] && personajesY[5]==vidasX[i]) {
                                        hay1=true;
                                        j=i;
                                    }
                                }
                                hay=false;
                            }
                            if (hay3) {
                                for (int i = 0; i <BombasX.length; i++) {
                                    if (personajesX[5]+1==BombasY[i] && personajesY[5]==BombasX[i]) {
                                        hay4=true;
                                        k=i;
                                    }
                                }
                                hay3=false;
                            }
                            
                            MatrizLabels[personajesX[5]+mo][personajesY[5]].setIcon(null);
                            if (hay2) {
                                ImageIcon cora=new ImageIcon(getClass().getResource("/imagenes/corazon.png"));
                                ImageIcon c=new ImageIcon(cora.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                                MatrizLabels[vidasY[j]][vidasX[j]].setIcon(c);
                                hay2=false;
                            }
                            if (hay5) {
                                ImageIcon bom=new ImageIcon(getClass().getResource("/imagenes/bomba.png"));
                                ImageIcon b=new ImageIcon(bom.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                                MatrizLabels[BombasY[k]][BombasX[k]].setIcon(b);
                                hay5=false;
                            }
                            personajesX[5]++;
                            ImageIcon prin1=new ImageIcon(getClass().getResource("/imagenes/Mago2.png"));
                            ImageIcon p1=new ImageIcon(prin1.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                            MatrizLabels[personajesX[5]][personajesY[5]].setIcon(p1);
                            if (hay1) {
                                hay1=false;
                                hay2=true;
                            }
                            if (hay4) {
                                hay4=false;
                                hay5=true;
                            }
                            RedibujarTablero();
                            sleep(500);
                            }
                    } catch (InterruptedException ex) {
                        Logger.getLogger(frmTablero.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            };
        moverAb.start();
        }
        cambio=!cambio;
        System.out.println("cambio"+cambio);
    }//GEN-LAST:event_AbajoActionPerformed

    private void DerechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DerechaActionPerformed
        if (Turno.equalsIgnoreCase("princesa") && cambio==true) {
            Thread moverDe=new Thread(){
                public void run()  {
                    try {
                        int contador=0;
                        int mo=0;
                        int j=0;
                        int k=0;
                        boolean hay=true;
                        boolean hay1=false;
                        boolean hay2=false;
                        boolean hay3=true;
                        boolean hay4=false;
                        boolean hay5=false;
                        contador=personajesY[0]+dado;
                        while(contador>personajesY[0]){
                            hay=true;
                            hay3=true;
                            if (contador<0) {
                                contador=0;
                            }
                            if (hay) {
                                for (int i = 0; i <vidasX.length; i++) {
                                    if (personajesX[0]==vidasY[i] && personajesY[0]+1==vidasX[i]) {
                                        hay1=true;
                                        j=i;
                                    }
                                }
                                hay=false;
                            }
                            if (hay3) {
                                for (int i = 0; i <BombasX.length; i++) {
                                    if (personajesX[0]==BombasY[i] && personajesY[0]+1==BombasX[i]) {
                                        hay4=true;
                                        k=i;
                                    }
                                }
                                hay3=false;
                            }
                            
                            MatrizLabels[personajesX[0]+mo][personajesY[0]].setIcon(null);
                            if (hay2) {
                                ImageIcon cora=new ImageIcon(getClass().getResource("/imagenes/corazon.png"));
                                ImageIcon c=new ImageIcon(cora.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                                MatrizLabels[vidasY[j]][vidasX[j]].setIcon(c);
                                hay2=false;
                            }
                            if (hay5) {
                                ImageIcon bom=new ImageIcon(getClass().getResource("/imagenes/bomba.png"));
                                ImageIcon b=new ImageIcon(bom.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                                MatrizLabels[BombasY[k]][BombasX[k]].setIcon(b);
                                hay5=false;
                            }
                            personajesY[0]++;
                            ImageIcon prin1=new ImageIcon(getClass().getResource("/imagenes/princesa1.png"));
                            ImageIcon p1=new ImageIcon(prin1.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                            MatrizLabels[personajesX[0]][personajesY[0]].setIcon(p1);
                            if (hay1) {
                                hay1=false;
                                hay2=true;
                            }
                            if (hay4) {
                                hay4=false;
                                hay5=true;
                            }
                            RedibujarTablero();
                            sleep(500);
                            }
                    } catch (InterruptedException ex) {
                        Logger.getLogger(frmTablero.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            };
        moverDe.start();
        }
        if (Turno.equalsIgnoreCase("princesa") && cambio==false) {
            Thread moverDe=new Thread(){
                public void run()  {
                    try {
                        int contador=0;
                        int mo=0;
                        int j=0;
                        int k=0;
                        boolean hay=true;
                        boolean hay1=false;
                        boolean hay2=false;
                        boolean hay3=true;
                        boolean hay4=false;
                        boolean hay5=false;
                        contador=personajesY[1]+dado;
                        while(contador>personajesY[1]){
                            hay=true;
                            hay3=true;
                            if (contador<0) {
                                contador=0;
                            }
                            if (hay) {
                                for (int i = 0; i <vidasX.length; i++) {
                                    if (personajesX[1]==vidasY[i] && personajesY[1]+1==vidasX[i]) {
                                        hay1=true;
                                        j=i;
                                    }
                                }
                                hay=false;
                            }
                            if (hay3) {
                                for (int i = 0; i <BombasX.length; i++) {
                                    if (personajesX[1]==BombasY[i] && personajesY[1]+1==BombasX[i]) {
                                        hay4=true;
                                        k=i;
                                    }
                                }
                                hay3=false;
                            }
                            
                            MatrizLabels[personajesX[1]+mo][personajesY[1]].setIcon(null);
                            if (hay2) {
                                ImageIcon cora=new ImageIcon(getClass().getResource("/imagenes/corazon.png"));
                                ImageIcon c=new ImageIcon(cora.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                                MatrizLabels[vidasY[j]][vidasX[j]].setIcon(c);
                                hay2=false;
                            }
                            if (hay5) {
                                ImageIcon bom=new ImageIcon(getClass().getResource("/imagenes/bomba.png"));
                                ImageIcon b=new ImageIcon(bom.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                                MatrizLabels[BombasY[k]][BombasX[k]].setIcon(b);
                                hay5=false;
                            }
                            personajesY[1]++;
                            ImageIcon prin1=new ImageIcon(getClass().getResource("/imagenes/princesa2.png"));
                            ImageIcon p1=new ImageIcon(prin1.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                            MatrizLabels[personajesX[1]][personajesY[1]].setIcon(p1);
                            if (hay1) {
                                hay1=false;
                                hay2=true;
                            }
                            if (hay4) {
                                hay4=false;
                                hay5=true;
                            }
                            RedibujarTablero();
                            sleep(500);
                            }
                    } catch (InterruptedException ex) {
                        Logger.getLogger(frmTablero.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            };
        moverDe.start();
        }
        if (Turno.equalsIgnoreCase("guerrero") && cambio==true) {
            Thread moverDe=new Thread(){
                public void run()  {
                    try {
                        int contador=0;
                        int mo=0;
                        int j=0;
                        int k=0;
                        boolean hay=true;
                        boolean hay1=false;
                        boolean hay2=false;
                        boolean hay3=true;
                        boolean hay4=false;
                        boolean hay5=false;
                        contador=personajesY[2]+dado;
                        while(contador>personajesY[2]){
                            hay=true;
                            hay3=true;
                            if (contador<0) {
                                contador=0;
                            }
                            if (hay) {
                                for (int i = 0; i <vidasX.length; i++) {
                                    if (personajesX[2]==vidasY[i] && personajesY[2]+1==vidasX[i]) {
                                        hay1=true;
                                        j=i;
                                    }
                                }
                                hay=false;
                            }
                            if (hay3) {
                                for (int i = 0; i <BombasX.length; i++) {
                                    if (personajesX[2]==BombasY[i] && personajesY[2]+1==BombasX[i]) {
                                        hay4=true;
                                        k=i;
                                    }
                                }
                                hay3=false;
                            }
                            
                            MatrizLabels[personajesX[2]+mo][personajesY[2]].setIcon(null);
                            if (hay2) {
                                ImageIcon cora=new ImageIcon(getClass().getResource("/imagenes/corazon.png"));
                                ImageIcon c=new ImageIcon(cora.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                                MatrizLabels[vidasY[j]][vidasX[j]].setIcon(c);
                                hay2=false;
                            }
                            if (hay5) {
                                ImageIcon bom=new ImageIcon(getClass().getResource("/imagenes/bomba.png"));
                                ImageIcon b=new ImageIcon(bom.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                                MatrizLabels[BombasY[k]][BombasX[k]].setIcon(b);
                                hay5=false;
                            }
                            personajesY[2]++;
                            ImageIcon prin1=new ImageIcon(getClass().getResource("/imagenes/guerrero1.png"));
                            ImageIcon p1=new ImageIcon(prin1.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                            MatrizLabels[personajesX[2]][personajesY[2]].setIcon(p1);
                            if (hay1) {
                                hay1=false;
                                hay2=true;
                            }
                            if (hay4) {
                                hay4=false;
                                hay5=true;
                            }
                            RedibujarTablero();
                            sleep(500);
                            }
                    } catch (InterruptedException ex) {
                        Logger.getLogger(frmTablero.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            };
        moverDe.start();
        }
        if (Turno.equalsIgnoreCase("guerrero") && cambio==false) {
            Thread moverDe=new Thread(){
                public void run()  {
                    try {
                        int contador=0;
                        int mo=0;
                        int j=0;
                        int k=0;
                        boolean hay=true;
                        boolean hay1=false;
                        boolean hay2=false;
                        boolean hay3=true;
                        boolean hay4=false;
                        boolean hay5=false;
                        contador=personajesY[3]+dado;
                        while(contador>personajesY[3]){
                            hay=true;
                            hay3=true;
                            if (contador<0) {
                                contador=0;
                            }
                            if (hay) {
                                for (int i = 0; i <vidasX.length; i++) {
                                    if (personajesX[3]==vidasY[i] && personajesY[3]+1==vidasX[i]) {
                                        hay1=true;
                                        j=i;
                                    }
                                }
                                hay=false;
                            }
                            if (hay3) {
                                for (int i = 0; i <BombasX.length; i++) {
                                    if (personajesX[3]==BombasY[i] && personajesY[3]+1==BombasX[i]) {
                                        hay4=true;
                                        k=i;
                                    }
                                }
                                hay3=false;
                            }
                            
                            MatrizLabels[personajesX[3]+mo][personajesY[3]].setIcon(null);
                            if (hay2) {
                                ImageIcon cora=new ImageIcon(getClass().getResource("/imagenes/corazon.png"));
                                ImageIcon c=new ImageIcon(cora.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                                MatrizLabels[vidasY[j]][vidasX[j]].setIcon(c);
                                hay2=false;
                            }
                            if (hay5) {
                                ImageIcon bom=new ImageIcon(getClass().getResource("/imagenes/bomba.png"));
                                ImageIcon b=new ImageIcon(bom.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                                MatrizLabels[BombasY[k]][BombasX[k]].setIcon(b);
                                hay5=false;
                            }
                            personajesY[3]++;
                            ImageIcon prin1=new ImageIcon(getClass().getResource("/imagenes/guerrero2.png"));
                            ImageIcon p1=new ImageIcon(prin1.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                            MatrizLabels[personajesX[3]][personajesY[3]].setIcon(p1);
                            if (hay1) {
                                hay1=false;
                                hay2=true;
                            }
                            if (hay4) {
                                hay4=false;
                                hay5=true;
                            }
                            RedibujarTablero();
                            sleep(500);
                            }
                    } catch (InterruptedException ex) {
                        Logger.getLogger(frmTablero.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            };
        moverDe.start();
        }
        if (Turno.equalsIgnoreCase("mago") && cambio==true) {
            Thread moverDe=new Thread(){
                public void run()  {
                    try {
                        int contador=0;
                        int mo=0;
                        int j=0;
                        int k=0;
                        boolean hay=true;
                        boolean hay1=false;
                        boolean hay2=false;
                        boolean hay3=true;
                        boolean hay4=false;
                        boolean hay5=false;
                        contador=personajesY[4]+dado;
                        while(contador>personajesY[4]){
                            hay=true;
                            hay3=true;
                            if (contador<0) {
                                contador=0;
                            }
                            if (hay) {
                                for (int i = 0; i <vidasX.length; i++) {
                                    if (personajesX[4]==vidasY[i] && personajesY[4]+1==vidasX[i]) {
                                        hay1=true;
                                        j=i;
                                    }
                                }
                                hay=false;
                            }
                            if (hay3) {
                                for (int i = 0; i <BombasX.length; i++) {
                                    if (personajesX[4]==BombasY[i] && personajesY[4]+1==BombasX[i]) {
                                        hay4=true;
                                        k=i;
                                    }
                                }
                                hay3=false;
                            }
                            
                            MatrizLabels[personajesX[4]+mo][personajesY[4]].setIcon(null);
                            if (hay2) {
                                ImageIcon cora=new ImageIcon(getClass().getResource("/imagenes/corazon.png"));
                                ImageIcon c=new ImageIcon(cora.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                                MatrizLabels[vidasY[j]][vidasX[j]].setIcon(c);
                                hay2=false;
                            }
                            if (hay5) {
                                ImageIcon bom=new ImageIcon(getClass().getResource("/imagenes/bomba.png"));
                                ImageIcon b=new ImageIcon(bom.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                                MatrizLabels[BombasY[k]][BombasX[k]].setIcon(b);
                                hay5=false;
                            }
                            personajesY[4]++;
                            ImageIcon prin1=new ImageIcon(getClass().getResource("/imagenes/Mago1.png"));
                            ImageIcon p1=new ImageIcon(prin1.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                            MatrizLabels[personajesX[4]][personajesY[4]].setIcon(p1);
                            if (hay1) {
                                hay1=false;
                                hay2=true;
                            }
                            if (hay4) {
                                hay4=false;
                                hay5=true;
                            }
                            RedibujarTablero();
                            sleep(500);
                            }
                    } catch (InterruptedException ex) {
                        Logger.getLogger(frmTablero.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            };
        moverDe.start();
        }
        if (Turno.equalsIgnoreCase("mago") && cambio==false) {
            Thread moverDe=new Thread(){
                public void run()  {
                    try {
                        int contador=0;
                        int mo=0;
                        int j=0;
                        int k=0;
                        boolean hay=true;
                        boolean hay1=false;
                        boolean hay2=false;
                        boolean hay3=true;
                        boolean hay4=false;
                        boolean hay5=false;
                        contador=personajesY[5]+dado;
                        while(contador>personajesY[5]){
                            hay=true;
                            hay3=true;
                            if (contador<0) {
                                contador=0;
                            }
                            if (hay) {
                                for (int i = 0; i <vidasX.length; i++) {
                                    if (personajesX[5]==vidasY[i] && personajesY[5]+1==vidasX[i]) {
                                        hay1=true;
                                        j=i;
                                    }
                                }
                                hay=false;
                            }
                            if (hay3) {
                                for (int i = 0; i <BombasX.length; i++) {
                                    if (personajesX[5]==BombasY[i] && personajesY[5]+1==BombasX[i]) {
                                        hay4=true;
                                        k=i;
                                    }
                                }
                                hay3=false;
                            }
                            
                            MatrizLabels[personajesX[5]+mo][personajesY[5]].setIcon(null);
                            if (hay2) {
                                ImageIcon cora=new ImageIcon(getClass().getResource("/imagenes/corazon.png"));
                                ImageIcon c=new ImageIcon(cora.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                                MatrizLabels[vidasY[j]][vidasX[j]].setIcon(c);
                                hay2=false;
                            }
                            if (hay5) {
                                ImageIcon bom=new ImageIcon(getClass().getResource("/imagenes/bomba.png"));
                                ImageIcon b=new ImageIcon(bom.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                                MatrizLabels[BombasY[k]][BombasX[k]].setIcon(b);
                                hay5=false;
                            }
                            personajesY[5]++;
                            ImageIcon prin1=new ImageIcon(getClass().getResource("/imagenes/Mago2.png"));
                            ImageIcon p1=new ImageIcon(prin1.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                            MatrizLabels[personajesX[5]][personajesY[5]].setIcon(p1);
                            if (hay1) {
                                hay1=false;
                                hay2=true;
                            }
                            if (hay4) {
                                hay4=false;
                                hay5=true;
                            }
                            RedibujarTablero();
                            sleep(500);
                            }
                    } catch (InterruptedException ex) {
                        Logger.getLogger(frmTablero.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            };
        moverDe.start();
        }
        cambio=!cambio;
        System.out.println("cambio"+cambio);
    }//GEN-LAST:event_DerechaActionPerformed

    private void IzquierdaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IzquierdaActionPerformed
        if (Turno.equalsIgnoreCase("princesa") && cambio==true) {
            Thread moverDe=new Thread(){
                public void run()  {
                    try {
                        int contador=0;
                        int mo=0;
                        int j=0;
                        int k=0;
                        boolean hay=true;
                        boolean hay1=false;
                        boolean hay2=false;
                        boolean hay3=true;
                        boolean hay4=false;
                        boolean hay5=false;
                        contador=personajesY[0]-dado;
                        while(contador<personajesY[0]){
                            hay=true;
                            hay3=true;
                            if (contador<0) {
                                contador=0;
                            }
                            if (hay) {
                                for (int i = 0; i <vidasX.length; i++) {
                                    if (personajesX[0]==vidasY[i] && personajesY[0]-1==vidasX[i]) {
                                        hay1=true;
                                        j=i;
                                    }
                                }
                                hay=false;
                            }
                            if (hay3) {
                                for (int i = 0; i <BombasX.length; i++) {
                                    if (personajesX[0]==BombasY[i] && personajesY[0]-1==BombasX[i]) {
                                        hay4=true;
                                        k=i;
                                    }
                                }
                                hay3=false;
                            }
                            
                            MatrizLabels[personajesX[0]+mo][personajesY[0]].setIcon(null);
                            if (hay2) {
                                ImageIcon cora=new ImageIcon(getClass().getResource("/imagenes/corazon.png"));
                                ImageIcon c=new ImageIcon(cora.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                                MatrizLabels[vidasY[j]][vidasX[j]].setIcon(c);
                                hay2=false;
                            }
                            if (hay5) {
                                ImageIcon bom=new ImageIcon(getClass().getResource("/imagenes/bomba.png"));
                                ImageIcon b=new ImageIcon(bom.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                                MatrizLabels[BombasY[k]][BombasX[k]].setIcon(b);
                                hay5=false;
                            }
                            personajesY[0]--;
                            ImageIcon prin1=new ImageIcon(getClass().getResource("/imagenes/princesa1.png"));
                            ImageIcon p1=new ImageIcon(prin1.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                            MatrizLabels[personajesX[0]][personajesY[0]].setIcon(p1);
                            if (hay1) {
                                hay1=false;
                                hay2=true;
                            }
                            if (hay4) {
                                hay4=false;
                                hay5=true;
                            }
                            RedibujarTablero();
                            sleep(500);
                            }
                    } catch (InterruptedException ex) {
                        Logger.getLogger(frmTablero.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            };
        moverDe.start();
        }
        if (Turno.equalsIgnoreCase("princesa") && cambio==false) {
            Thread moverDe=new Thread(){
                public void run()  {
                    try {
                        int contador=0;
                        int mo=0;
                        int j=0;
                        int k=0;
                        boolean hay=true;
                        boolean hay1=false;
                        boolean hay2=false;
                        boolean hay3=true;
                        boolean hay4=false;
                        boolean hay5=false;
                        contador=personajesY[1]-dado;
                        while(contador<personajesY[1]){
                            hay=true;
                            hay3=true;
                            if (contador<0) {
                                contador=0;
                            }
                            if (hay) {
                                for (int i = 0; i <vidasX.length; i++) {
                                    if (personajesX[1]==vidasY[i] && personajesY[1]-1==vidasX[i]) {
                                        hay1=true;
                                        j=i;
                                    }
                                }
                                hay=false;
                            }
                            if (hay3) {
                                for (int i = 0; i <BombasX.length; i++) {
                                    if (personajesX[1]==BombasY[i] && personajesY[1]-1==BombasX[i]) {
                                        hay4=true;
                                        k=i;
                                    }
                                }
                                hay3=false;
                            }
                            
                            MatrizLabels[personajesX[1]+mo][personajesY[1]].setIcon(null);
                            if (hay2) {
                                ImageIcon cora=new ImageIcon(getClass().getResource("/imagenes/corazon.png"));
                                ImageIcon c=new ImageIcon(cora.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                                MatrizLabels[vidasY[j]][vidasX[j]].setIcon(c);
                                hay2=false;
                            }
                            if (hay5) {
                                ImageIcon bom=new ImageIcon(getClass().getResource("/imagenes/bomba.png"));
                                ImageIcon b=new ImageIcon(bom.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                                MatrizLabels[BombasY[k]][BombasX[k]].setIcon(b);
                                hay5=false;
                            }
                            personajesY[1]--;
                            ImageIcon prin1=new ImageIcon(getClass().getResource("/imagenes/princesa2.png"));
                            ImageIcon p1=new ImageIcon(prin1.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                            MatrizLabels[personajesX[1]][personajesY[1]].setIcon(p1);
                            if (hay1) {
                                hay1=false;
                                hay2=true;
                            }
                            if (hay4) {
                                hay4=false;
                                hay5=true;
                            }
                            RedibujarTablero();
                            sleep(500);
                            }
                    } catch (InterruptedException ex) {
                        Logger.getLogger(frmTablero.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            };
        moverDe.start();
        }
        if (Turno.equalsIgnoreCase("guerrero") && cambio==true) {
            Thread moverDe=new Thread(){
                public void run()  {
                    try {
                        int contador=0;
                        int mo=0;
                        int j=0;
                        int k=0;
                        boolean hay=true;
                        boolean hay1=false;
                        boolean hay2=false;
                        boolean hay3=true;
                        boolean hay4=false;
                        boolean hay5=false;
                        contador=personajesY[2]-dado;
                        while(contador<personajesY[2]){
                            hay=true;
                            hay3=true;
                            if (contador<0) {
                                contador=0;
                            }
                            if (hay) {
                                for (int i = 0; i <vidasX.length; i++) {
                                    if (personajesX[2]==vidasY[i] && personajesY[2]-1==vidasX[i]) {
                                        hay1=true;
                                        j=i;
                                    }
                                }
                                hay=false;
                            }
                            if (hay3) {
                                for (int i = 0; i <BombasX.length; i++) {
                                    if (personajesX[2]==BombasY[i] && personajesY[2]-1==BombasX[i]) {
                                        hay4=true;
                                        k=i;
                                    }
                                }
                                hay3=false;
                            }
                            
                            MatrizLabels[personajesX[2]+mo][personajesY[2]].setIcon(null);
                            if (hay2) {
                                ImageIcon cora=new ImageIcon(getClass().getResource("/imagenes/corazon.png"));
                                ImageIcon c=new ImageIcon(cora.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                                MatrizLabels[vidasY[j]][vidasX[j]].setIcon(c);
                                hay2=false;
                            }
                            if (hay5) {
                                ImageIcon bom=new ImageIcon(getClass().getResource("/imagenes/bomba.png"));
                                ImageIcon b=new ImageIcon(bom.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                                MatrizLabels[BombasY[k]][BombasX[k]].setIcon(b);
                                hay5=false;
                            }
                            personajesY[2]--;
                            ImageIcon prin1=new ImageIcon(getClass().getResource("/imagenes/guerrero1.png"));
                            ImageIcon p1=new ImageIcon(prin1.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                            MatrizLabels[personajesX[2]][personajesY[2]].setIcon(p1);
                            if (hay1) {
                                hay1=false;
                                hay2=true;
                            }
                            if (hay4) {
                                hay4=false;
                                hay5=true;
                            }
                            RedibujarTablero();
                            sleep(500);
                            }
                    } catch (InterruptedException ex) {
                        Logger.getLogger(frmTablero.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            };
        moverDe.start();
        }
        if (Turno.equalsIgnoreCase("guerrero") && cambio==false) {
            Thread moverDe=new Thread(){
                public void run()  {
                    try {
                        int contador=0;
                        int mo=0;
                        int j=0;
                        int k=0;
                        boolean hay=true;
                        boolean hay1=false;
                        boolean hay2=false;
                        boolean hay3=true;
                        boolean hay4=false;
                        boolean hay5=false;
                        contador=personajesY[3]-dado;
                        while(contador<personajesY[3]){
                            hay=true;
                            hay3=true;
                            if (contador<0) {
                                contador=0;
                            }
                            if (hay) {
                                for (int i = 0; i <vidasX.length; i++) {
                                    if (personajesX[3]==vidasY[i] && personajesY[3]-1==vidasX[i]) {
                                        hay1=true;
                                        j=i;
                                    }
                                }
                                hay=false;
                            }
                            if (hay3) {
                                for (int i = 0; i <BombasX.length; i++) {
                                    if (personajesX[3]==BombasY[i] && personajesY[3]-1==BombasX[i]) {
                                        hay4=true;
                                        k=i;
                                    }
                                }
                                hay3=false;
                            }
                            
                            MatrizLabels[personajesX[3]+mo][personajesY[3]].setIcon(null);
                            if (hay2) {
                                ImageIcon cora=new ImageIcon(getClass().getResource("/imagenes/corazon.png"));
                                ImageIcon c=new ImageIcon(cora.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                                MatrizLabels[vidasY[j]][vidasX[j]].setIcon(c);
                                hay2=false;
                            }
                            if (hay5) {
                                ImageIcon bom=new ImageIcon(getClass().getResource("/imagenes/bomba.png"));
                                ImageIcon b=new ImageIcon(bom.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                                MatrizLabels[BombasY[k]][BombasX[k]].setIcon(b);
                                hay5=false;
                            }
                            personajesY[3]--;
                            ImageIcon prin1=new ImageIcon(getClass().getResource("/imagenes/guerrero2.png"));
                            ImageIcon p1=new ImageIcon(prin1.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                            MatrizLabels[personajesX[3]][personajesY[3]].setIcon(p1);
                            if (hay1) {
                                hay1=false;
                                hay2=true;
                            }
                            if (hay4) {
                                hay4=false;
                                hay5=true;
                            }
                            RedibujarTablero();
                            sleep(500);
                            }
                    } catch (InterruptedException ex) {
                        Logger.getLogger(frmTablero.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            };
        moverDe.start();
        }
        if (Turno.equalsIgnoreCase("mago") && cambio==true) {
            Thread moverDe=new Thread(){
                public void run()  {
                    try {
                        int contador=0;
                        int mo=0;
                        int j=0;
                        int k=0;
                        boolean hay=true;
                        boolean hay1=false;
                        boolean hay2=false;
                        boolean hay3=true;
                        boolean hay4=false;
                        boolean hay5=false;
                        contador=personajesY[4]-dado;
                        while(contador<personajesY[4]){
                            hay=true;
                            hay3=true;
                            if (contador<0) {
                                contador=0;
                            }
                            if (hay) {
                                for (int i = 0; i <vidasX.length; i++) {
                                    if (personajesX[4]==vidasY[i] && personajesY[4]-1==vidasX[i]) {
                                        hay1=true;
                                        j=i;
                                    }
                                }
                                hay=false;
                            }
                            if (hay3) {
                                for (int i = 0; i <BombasX.length; i++) {
                                    if (personajesX[4]==BombasY[i] && personajesY[4]-1==BombasX[i]) {
                                        hay4=true;
                                        k=i;
                                    }
                                }
                                hay3=false;
                            }
                            
                            MatrizLabels[personajesX[4]+mo][personajesY[4]].setIcon(null);
                            if (hay2) {
                                ImageIcon cora=new ImageIcon(getClass().getResource("/imagenes/corazon.png"));
                                ImageIcon c=new ImageIcon(cora.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                                MatrizLabels[vidasY[j]][vidasX[j]].setIcon(c);
                                hay2=false;
                            }
                            if (hay5) {
                                ImageIcon bom=new ImageIcon(getClass().getResource("/imagenes/bomba.png"));
                                ImageIcon b=new ImageIcon(bom.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                                MatrizLabels[BombasY[k]][BombasX[k]].setIcon(b);
                                hay5=false;
                            }
                            personajesY[4]--;
                            ImageIcon prin1=new ImageIcon(getClass().getResource("/imagenes/Mago1.png"));
                            ImageIcon p1=new ImageIcon(prin1.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                            MatrizLabels[personajesX[4]][personajesY[4]].setIcon(p1);
                            if (hay1) {
                                hay1=false;
                                hay2=true;
                            }
                            if (hay4) {
                                hay4=false;
                                hay5=true;
                            }
                            RedibujarTablero();
                            sleep(500);
                            }
                    } catch (InterruptedException ex) {
                        Logger.getLogger(frmTablero.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            };
        moverDe.start();
        }
        if (Turno.equalsIgnoreCase("mago") && cambio==false) {
            Thread moverDe=new Thread(){
                public void run()  {
                    try {
                        int contador=0;
                        int mo=0;
                        int j=0;
                        int k=0;
                        boolean hay=true;
                        boolean hay1=false;
                        boolean hay2=false;
                        boolean hay3=true;
                        boolean hay4=false;
                        boolean hay5=false;
                        contador=personajesY[5]-dado;
                        while(contador<personajesY[5]){
                            hay=true;
                            hay3=true;
                            if (contador<0) {
                                contador=0;
                            }
                            if (hay) {
                                for (int i = 0; i <vidasX.length; i++) {
                                    if (personajesX[5]==vidasY[i] && personajesY[5]-1==vidasX[i]) {
                                        hay1=true;
                                        j=i;
                                    }
                                }
                                hay=false;
                            }
                            if (hay3) {
                                for (int i = 0; i <BombasX.length; i++) {
                                    if (personajesX[5]==BombasY[i] && personajesY[5]-1==BombasX[i]) {
                                        hay4=true;
                                        k=i;
                                    }
                                }
                                hay3=false;
                            }
                            
                            MatrizLabels[personajesX[5]+mo][personajesY[5]].setIcon(null);
                            if (hay2) {
                                ImageIcon cora=new ImageIcon(getClass().getResource("/imagenes/corazon.png"));
                                ImageIcon c=new ImageIcon(cora.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                                MatrizLabels[vidasY[j]][vidasX[j]].setIcon(c);
                                hay2=false;
                            }
                            if (hay5) {
                                ImageIcon bom=new ImageIcon(getClass().getResource("/imagenes/bomba.png"));
                                ImageIcon b=new ImageIcon(bom.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                                MatrizLabels[BombasY[k]][BombasX[k]].setIcon(b);
                                hay5=false;
                            }
                            personajesY[5]--;
                            ImageIcon prin1=new ImageIcon(getClass().getResource("/imagenes/Mago2.png"));
                            ImageIcon p1=new ImageIcon(prin1.getImage().getScaledInstance(TamX, TamY, Image.SCALE_DEFAULT));
                            MatrizLabels[personajesX[5]][personajesY[5]].setIcon(p1);
                            if (hay1) {
                                hay1=false;
                                hay2=true;
                            }
                            if (hay4) {
                                hay4=false;
                                hay5=true;
                            }
                            RedibujarTablero();
                            sleep(500);
                            }
                    } catch (InterruptedException ex) {
                        Logger.getLogger(frmTablero.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            };
        moverDe.start();
        }
        cambio=!cambio;
        System.out.println("cambio"+cambio);
    }//GEN-LAST:event_IzquierdaActionPerformed

    private void AtIzquierdaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AtIzquierdaActionPerformed
        if (Turno.equalsIgnoreCase("mago")&& cambio==false) {
            for (int i = 1; i < personajesX.length; i=i+2) {
                if (personajesY[4]-4>=0) {
                    if (personajesX[4]==personajesX[i] && personajesY[4]-1==personajesY[i]) {
                    vidas2--;
                    }
                    if (personajesX[4]==personajesX[i] && personajesY[4]-2==personajesY[i]) {
                        vidas2--;
                    }
                    if (personajesX[4]==personajesX[i] && personajesY[4]-3==personajesY[i]) {
                        vidas2--;
                    }
                    if (personajesX[4]==personajesX[i] && personajesY[4]-4==personajesY[i]) {
                        vidas2--;
                    }
                }
            }
        }
        if (Turno.equalsIgnoreCase("mago")&& cambio==true) {
            for (int i = 0; i < personajesX.length; i=i+2) {
                if (personajesY[4]-4>=0) {
                    if (personajesX[5]==personajesX[i] && personajesY[5]-1==personajesY[i]) {
                    vidas1--;
                    }
                    if (personajesX[5]==personajesX[i] && personajesY[5]-2==personajesY[i]) {
                        vidas1--;
                    }
                    if (personajesX[5]==personajesX[i] && personajesY[5]-3==personajesY[i]) {
                        vidas1--;
                    }
                    if (personajesX[5]==personajesX[i] && personajesY[5]-4==personajesY[i]) {
                        vidas1--;
                    }
                }
            }
        }
        if (Turno.equalsIgnoreCase("guerrero")&& cambio==false) {
            for (int i = 1; i < personajesX.length; i=i+2) {
                if (personajesY[2]-2>=0) {
                    if (personajesX[2]==personajesX[i] && personajesY[2]-1==personajesY[i]) {
                    vidas2=vidas2-2;
                    }
                    if (personajesX[2]==personajesX[i] && personajesY[2]-2==personajesY[i]) {
                        vidas2=vidas2-2;
                    }
                   
                }
            }
        }
        if (Turno.equalsIgnoreCase("guerrero")&& cambio==true) {
            for (int i = 0; i < personajesX.length; i=i+2) {
                if (personajesY[4]-2>=0) {
                    if (personajesX[3]==personajesX[i] && personajesY[3]-1==personajesY[i]) {
                    vidas1=vidas1-2;
                    }
                    if (personajesX[3]==personajesX[i] && personajesY[3]-2==personajesY[i]) {
                        vidas1=vidas1-2;
                    }
                    
                }
            }
        }
        if (Turno.equalsIgnoreCase("princesa")&& cambio==false) {
            for (int i = 1; i < personajesX.length; i=i+2) {
                if (personajesY[0]-1>=0) {
                    if (personajesX[0]==personajesX[i] && personajesY[0]-1==personajesY[i]) {
                    vidas2--;
                    }
                    
                   
                }
            }
        }
        if (Turno.equalsIgnoreCase("princesa")&& cambio==true) {
            for (int i = 0; i < personajesX.length; i=i+2) {
                if (personajesY[1]-1>=0) {
                    if (personajesX[1]==personajesX[i] && personajesY[1]-1==personajesY[i]) {
                    vidas1--;
                    }
                    
                    
                }
            }
        }
    }//GEN-LAST:event_AtIzquierdaActionPerformed

    private void AtArribaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AtArribaActionPerformed
        if (Turno.equalsIgnoreCase("mago")&& cambio==false) {
            for (int i = 1; i < personajesX.length; i=i+2) {
                if (personajesX[4]-4>=0) {
                    if (personajesX[4]-1==personajesX[i] && personajesY[4]==personajesY[i]) {
                    vidas2--;
                    }
                    if (personajesX[4]-2==personajesX[i] && personajesY[4]==personajesY[i]) {
                        vidas2--;
                    }
                    if (personajesX[4]-3==personajesX[i] && personajesY[4]==personajesY[i]) {
                        vidas2--;
                    }
                    if (personajesX[4]-4==personajesX[i] && personajesY[4]==personajesY[i]) {
                        vidas2--;
                    }
                }
            }
        }
        if (Turno.equalsIgnoreCase("mago")&& cambio==true) {
            for (int i = 0; i < personajesX.length; i=i+2) {
                if (personajesX[5]-4>=0) {
                    if (personajesX[5]-1==personajesX[i] && personajesY[5]==personajesY[i]) {
                    vidas1--;
                    }
                    if (personajesX[5]-2==personajesX[i] && personajesY[5]==personajesY[i]) {
                        vidas1--;
                    }
                    if (personajesX[5]-3==personajesX[i] && personajesY[5]==personajesY[i]) {
                        vidas1--;
                    }
                    if (personajesX[5]-4==personajesX[i] && personajesY[5]==personajesY[i]) {
                        vidas1--;
                    }
                }
            }
        }
        if (Turno.equalsIgnoreCase("guerrero")&& cambio==false) {
            for (int i = 1; i < personajesX.length; i=i+2) {
                if (personajesX[2]-2>=0) {
                    if (personajesX[2]-1==personajesX[i] && personajesY[2]==personajesY[i]) {
                    vidas2=vidas2-2;
                    }
                    if (personajesX[2]-2==personajesX[i] && personajesY[2]==personajesY[i]) {
                        vidas2=vidas2-2;
                    }
                    
                }
            }
        }
        if (Turno.equalsIgnoreCase("guerrero")&& cambio==true) {
            for (int i = 0; i < personajesX.length; i=i+2) {
                if (personajesX[3]-2>=0) {
                    if (personajesX[3]-1==personajesX[i] && personajesY[3]==personajesY[i]) {
                    vidas1=vidas1-2;
                    }
                    if (personajesX[3]-2==personajesX[i] && personajesY[3]==personajesY[i]) {
                        vidas1=vidas1-2;
                    }
                    
                }
            }
        }
        if (Turno.equalsIgnoreCase("princesa")&& cambio==false) {
            for (int i = 1; i < personajesX.length; i=i+2) {
                if (personajesX[0]-1>=0) {
                    if (personajesX[0]-1==personajesX[i] && personajesY[0]==personajesY[i]) {
                    vidas2--;
                    }
                    
                    
                }
            }
        }
        if (Turno.equalsIgnoreCase("princesa")&& cambio==true) {
            for (int i = 0; i < personajesX.length; i=i+2) {
                if (personajesX[1]-1>=0) {
                    if (personajesX[1]-1==personajesX[i] && personajesY[1]==personajesY[i]) {
                    vidas1--;
                    }
                    
                    
                }
            }
        }
        
    }//GEN-LAST:event_AtArribaActionPerformed

    private void AtAbajoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AtAbajoActionPerformed
        if (Turno.equalsIgnoreCase("mago")&& cambio==false) {
            for (int i = 1; i < personajesX.length; i=i+2) {
                if (personajesX[4]+4<=DimensionY-1) {
                    if (personajesX[4]+1==personajesX[i] && personajesY[4]==personajesY[i]) {
                    vidas2--;
                    }
                    if (personajesX[4]+2==personajesX[i] && personajesY[4]==personajesY[i]) {
                        vidas2--;
                    }
                    if (personajesX[4]+3==personajesX[i] && personajesY[4]==personajesY[i]) {
                        vidas2--;
                    }
                    if (personajesX[4]+4==personajesX[i] && personajesY[4]==personajesY[i]) {
                        vidas2--;
                    }
                }
            }
        }
        if (Turno.equalsIgnoreCase("mago")&& cambio==true) {
            for (int i = 0; i < personajesX.length; i=i+2) {
                if (personajesX[5]+4<=DimensionY-1) {
                    if (personajesX[5]+1==personajesX[i] && personajesY[5]==personajesY[i]) {
                    vidas1--;
                    }
                    if (personajesX[5]+2==personajesX[i] && personajesY[5]==personajesY[i]) {
                        vidas1--;
                    }
                    if (personajesX[5]+3==personajesX[i] && personajesY[5]==personajesY[i]) {
                        vidas1--;
                    }
                    if (personajesX[5]+4==personajesX[i] && personajesY[5]==personajesY[i]) {
                        vidas1--;
                    }
                }
            }
        }
        if (Turno.equalsIgnoreCase("guerrero")&& cambio==false) {
            for (int i = 1; i < personajesX.length; i=i+2) {
                if (personajesX[2]+2<=DimensionY-1) {
                    if (personajesX[2]+1==personajesX[i] && personajesY[2]==personajesY[i]) {
                    vidas2=vidas2-2;
                    }
                    if (personajesX[2]+2==personajesX[i] && personajesY[2]==personajesY[i]) {
                        vidas2=vidas2-2;
                    }
                    
                }
            }
        }
        if (Turno.equalsIgnoreCase("guerrero")&& cambio==true) {
            for (int i = 0; i < personajesX.length; i=i+2) {
                if (personajesX[3]+2<=DimensionY-1) {
                    if (personajesX[3]+1==personajesX[i] && personajesY[3]==personajesY[i]) {
                    vidas1=vidas1-2;
                    }
                    if (personajesX[3]+2==personajesX[i] && personajesY[3]==personajesY[i]) {
                        vidas1=vidas1-2;
                    }
                    
                }
            }
        }
        if (Turno.equalsIgnoreCase("princesa")&& cambio==false) {
            for (int i = 1; i < personajesX.length; i=i+2) {
                if (personajesX[0]+1<=DimensionY-1) {
                    if (personajesX[0]+1==personajesX[i] && personajesY[0]==personajesY[i]) {
                    vidas2--;
                    }
                    
                    
                }
            }
        }
        if (Turno.equalsIgnoreCase("princesa")&& cambio==true) {
            for (int i = 0; i < personajesX.length; i=i+2) {
                if (personajesX[1]+1<=DimensionY-1) {
                    if (personajesX[1]+1==personajesX[i] && personajesY[1]==personajesY[i]) {
                    vidas1--;
                    }
                    
                    
                }
            }
        }
    }//GEN-LAST:event_AtAbajoActionPerformed

    private void AtDerechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AtDerechaActionPerformed
        if (Turno.equalsIgnoreCase("mago")&& cambio==false) {
            for (int i = 1; i < personajesX.length; i=i+2) {
                if (personajesY[4]+4<=DimensionY-1) {
                    if (personajesX[4]==personajesX[i] && personajesY[4]+1==personajesY[i]) {
                    vidas2--;
                    }
                    if (personajesX[4]==personajesX[i] && personajesY[4]+2==personajesY[i]) {
                        vidas2--;
                    }
                    if (personajesX[4]==personajesX[i] && personajesY[4]+3==personajesY[i]) {
                        vidas2--;
                    }
                    if (personajesX[4]==personajesX[i] && personajesY[4]+4==personajesY[i]) {
                        vidas2--;
                    }
                }
            }
        }
        if (Turno.equalsIgnoreCase("mago")&& cambio==true) {
            for (int i = 0; i < personajesX.length; i=i+2) {
                if (personajesY[5]+4<=DimensionY-1) {
                    if (personajesX[5]==personajesX[i] && personajesY[5]+1==personajesY[i]) {
                    vidas1--;
                    }
                    if (personajesX[5]==personajesX[i] && personajesY[5]+2==personajesY[i]) {
                        vidas1--;
                    }
                    if (personajesX[5]==personajesX[i] && personajesY[5]+3==personajesY[i]) {
                        vidas1--;
                    }
                    if (personajesX[5]==personajesX[i] && personajesY[5]+4==personajesY[i]) {
                        vidas1--;
                    }
                }
            }
        }
        if (Turno.equalsIgnoreCase("guerrero")&& cambio==false) {
            for (int i = 1; i < personajesX.length; i=i+2) {
                if (personajesY[2]+2<=DimensionY-1) {
                    if (personajesX[2]==personajesX[i] && personajesY[2]+1==personajesY[i]) {
                    vidas2=vidas2-2;
                    }
                    if (personajesX[2]==personajesX[i] && personajesY[2]+2==personajesY[i]) {
                        vidas2=vidas2-2;
                    }
                    
                }
            }
        }
        if (Turno.equalsIgnoreCase("guerrero")&& cambio==true) {
            for (int i = 0; i < personajesX.length; i=i+2) {
                if (personajesY[3]+2<=DimensionY-1) {
                    if (personajesX[3]==personajesX[i] && personajesY[3]+1==personajesY[i]) {
                    vidas1=vidas1-2;
                    }
                    if (personajesX[3]==personajesX[i] && personajesY[3]+2==personajesY[i]) {
                        vidas1=vidas1-2;
                    }
                    
                }
            }
        }
        if (Turno.equalsIgnoreCase("princesa")&& cambio==false) {
            for (int i = 1; i < personajesX.length; i=i+2) {
                if (personajesY[0]+1<=DimensionY-1) {
                    if (personajesX[0]==personajesX[i] && personajesY[0]+1==personajesY[i]) {
                    vidas2--;
                    }
                    
                    
                }
            }
        }
        if (Turno.equalsIgnoreCase("princesa")&& cambio==true) {
            for (int i = 0; i < personajesX.length; i=i+2) {
                if (personajesY[1]+1<=DimensionY-1) {
                    if (personajesX[1]==personajesX[i] && personajesY[1]+1==personajesY[i]) {
                    vidas1--;
                    }
                    
                    
                }
            }
        }
    }//GEN-LAST:event_AtDerechaActionPerformed
    
    /**
     * Función que verifica si hay elementos creados en el pnlTablero
     */
    private boolean HayElementos()
    {
        //Si hay elementos en el panel retorna true, caso contrario retorna false
        return pnlTablero.getComponentCount()>0;
    }
    
    /**
     * Metodo personalizado que sirve para manejar el evento Click de cada uno de los botones de la matriz
     */
    private void Click(JButton btn)
    {
        JOptionPane.showMessageDialog(this, "Soy el boton en la posición: " + btn.getToolTipText());
    }

    /**
     * Función que verifica si el valor String es de tipo númerico
     */
    boolean esNumerico(String valorString)
    {
        try
        {
            Integer.parseInt(valorString);
        }
        catch(NumberFormatException ex)
        {
            return false;
        }
        return true;
    }
    
    /**
     * Función que valida que las dimensiones ingresadas por el usuario sean validas y entre los rangos de 1 a 100
    */
    private boolean ValidarDimensiones()
    {
        //definición inicial de variable de retorno
        boolean valido = false;
        //Se obtienen las entradas de texto de las dimensiones ingresadas
        if (esNumerico(tbxDimX.getText()))
        {
            if (esNumerico(tbxDimX.getText()))
            {
                //Se obtiene el tamaño en X (ancho) que debe tener el boton
                DimensionX = Integer.parseInt(tbxDimX.getText());
                //Se obtiene el tamaño en Y (alto) que debe tener el boton
                DimensionY = Integer.parseInt(tbxDimX.getText());
                //Se verifican que las dimensiones ingresadas por el usuario esten entre 1 y 100
                if ((DimensionX < 19)  && (DimensionX > 7))
                {
                    return true;
                }
            }
        }
        return valido;
    }
    
    /**
     * Metodo que calcula el tamaño de ancho y alto de los botones acorde a la cantidad de elementos en la matriz
     */
    private void ObtenerTamanioObjetos(int cantX, int cantY)
    {
        TamX = TableroX/cantX;
        TamY = TableroY/cantY;
    }
    private static int generaNumAleatorio(int minimo,int maximo){//funcion para generar un numero aleatorio
    
        return (int)Math.floor(Math.random()*(minimo-(maximo+1))+(maximo+1));//limites del numero generado
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmTablero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmTablero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmTablero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmTablero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmTablero().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Abajo;
    private javax.swing.JButton Arriba;
    private javax.swing.JButton AtAbajo;
    private javax.swing.JButton AtArriba;
    private javax.swing.JButton AtDerecha;
    private javax.swing.JButton AtIzquierda;
    private javax.swing.JButton Derecha;
    private javax.swing.JButton Izquierda;
    private javax.swing.JLabel Minutos;
    private javax.swing.JLabel NombreJ1;
    private javax.swing.JLabel NombreJ2;
    private javax.swing.JLabel Numero;
    private javax.swing.JLabel P1;
    private javax.swing.JLabel S1;
    private javax.swing.JLabel S2;
    private javax.swing.JLabel S3;
    private javax.swing.JButton Tirar;
    private javax.swing.JLabel Vidas1;
    private javax.swing.JLabel Vidas2;
    private javax.swing.JButton btnCrear;
    private javax.swing.JButton btnDestruir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblDimX;
    private javax.swing.JLabel p2;
    private javax.swing.JLabel p3;
    private javax.swing.JPanel pnlMenu;
    private javax.swing.JPanel pnlTablero;
    private javax.swing.JLabel se;
    private javax.swing.JTextField tbxDimX;
    // End of variables declaration//GEN-END:variables
}
